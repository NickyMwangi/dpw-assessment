"use strict";
$.fn.pcodedmenu = function(settings) {
    var oid = this.attr("id");
    // Pcoded Menu default settings:
    var defaults = {
        // Common option both for vertical nad horizontal
        themelayout: 'vertical', // value should be horizontal/vertical
        MenuTrigger: 'click', // value should be hover/click
        SubMenuTrigger: 'click', // value should be hover/click
        activeMenuClass: 'active',
        ThemeBackgroundPattern: 'pattern6', // Value should be
        HeaderBackground: 'theme4', // Value should be theme1/theme2/theme3/theme4/theme5/theme6/theme7/theme8/theme9
        LHeaderBackground: 'theme4', // Value should be theme1/theme2/theme3/theme4/theme5/theme6/theme7/theme8/theme9
        NavbarBackground: 'theme4', // Value should be theme1/theme2/theme3/theme4/theme5/theme6/theme7/theme8/theme9
        ActiveItemBackground: 'theme0', // Value should be theme1/theme2/theme3/theme4/theme5/theme6/theme7/theme8/theme9
        SubItemBackground: 'theme4', // Value should be theme1/theme2/theme3/theme4/theme5/theme6/theme7/theme8/theme9
        ActiveItemStyle: 'style0',
        ItemBorder: true,
        ItemBorderStyle: 'solid', // value should be solid/dotted/dashed
        SubItemBorder: true,
        DropDownIconStyle: 'style1', // value should be style1,style2,style3
        FixedNavbarPosition: false,
        FixedHeaderPosition: false,

        // Horizontal Navigation option
        horizontalMenuplacement: 'top', // value should be top/bottom
        horizontalMenulayout: 'widebox', //value should be wide/box/widebox
        horizontalBrandItem: true,
        horizontalLeftNavItem: true,
        horizontalRightItem: false,
        horizontalSearchItem: false,
        horizontalBrandItemAlign: 'left',
        horizontalLeftNavItemAlign: 'right',
        horizontalRightItemAlign: 'right',
        horizontalsearchItemAlign: 'right',
        horizontalstickynavigation: false,
        horizontalNavigationView: 'view1',
        horizontalNavIsCentered: false,
        horizontalNavigationMenuIcon: true,
        layouttype:'light',
        // Vertical Navigation option
        verticalMenuplacement: 'left', // value should be left/right
        verticalMenulayout: 'wide', // value should be wide/box/widebox
        collapseVerticalLeftHeader: true,
        VerticalSubMenuItemIconStyle: 'style6', // value should be style1,style2,style3
        VerticalNavigationView: 'view1',
        verticalMenueffect: {
            desktop: "shrink",
            tablet: "push",
            phone: "overlay",
        },
        defaultVerticalMenu: {
            desktop: "expanded", // value should be offcanvas/collapsed/expanded/compact/compact-acc/fullpage/ex-popover/sub-expanded
            tablet: "collapsed", // value should be offcanvas/collapsed/expanded/compact
            phone: "offcanvas", // value should be offcanvas/collapsed/expanded/compact
        },
        onToggleVerticalMenu: {
            desktop: "collapsed", // value should be offcanvas/collapsed/expanded/compact
            tablet: "expanded", // value should be offcanvas/collapsed/expanded/compact
            phone: "expanded", // value should be offcanvas/collapsed/expanded/compact
        },
    };
    var satnt,mt,tw,dt,is_chrome,is_explorer ,is_firefox,is_safari,is_opera,is_mac,is_windows;
    var settings = $.extend({}, defaults, settings);
    var PcodedMenu = {
        PcodedMenuInit: function() {
            PcodedMenu.Handlethemelayout();
            PcodedMenu.HandleverticalMenuplacement();
            PcodedMenu.HandlehorizontalMenuplacement();
            PcodedMenu.HandleMenulayout();
            PcodedMenu.HandleDeviceType();
            PcodedMenu.Handlecomponetheight();
            PcodedMenu.HandleMenuOnClick();
            PcodedMenu.HandleMenuTrigger();
            PcodedMenu.HandleSubMenuTrigger();
            PcodedMenu.HandleActiveItem();
            PcodedMenu.HandleOffcanvasMenu();
            PcodedMenu.HandleVerticalLeftHeader();
            PcodedMenu.HandleThemeBackground();
            PcodedMenu.HandleActiveItemStyle();
            PcodedMenu.HandleItemBorder();
            PcodedMenu.HandleBorderStyle();
            PcodedMenu.HandleSubItemBorder();
            PcodedMenu.HandleDropDownIconStyle();
            PcodedMenu.HandleOptionSelectorPanel();
            PcodedMenu.HandleNavbarPosition();
            PcodedMenu.HandleVerticalSubMenuItemIconStyle();
            PcodedMenu.HandleVerticalNavigationView();
            PcodedMenu.HandleHorizontalItemIsCentered();
            PcodedMenu.HandleHorizontalItemAlignment();
            PcodedMenu.HandleSubMenuOffset();
            PcodedMenu.HandleHorizontalStickyNavigation();
            PcodedMenu.HandleDocumentClickEvent();
            PcodedMenu.HandleVerticalScrollbar();
            PcodedMenu.HandleHorizontalMobileMenuToggle();
            PcodedMenu.horizontalNavigationMenuIcon();
            PcodedMenu.verticalNavigationSearchBar();
            PcodedMenu.safariBrowsercompatibility();
            PcodedMenu.Handlemenutype();
            PcodedMenu.Handlelayoutvartype();
        },
        safariBrowsercompatibility: function() {
            is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
            is_explorer = navigator.userAgent.indexOf('MSIE') > -1;
            is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
            is_safari = navigator.userAgent.indexOf("Safari") > -1;
            is_opera = navigator.userAgent.indexOf("Presto") > -1;
            is_mac = (navigator.userAgent.indexOf('Mac OS') != -1);
            is_windows = !is_mac;

            if (is_chrome && is_safari) {
                is_safari = false;
            }
            if (is_safari || is_windows) {}
        },

        verticalNavigationSearchBar: function() {
            if (settings.themelayout === "vertical") {
                $('.searchbar-toggle').on('click', function() {
                    $(this).parent('.pcoded-search').toggleClass('open');
                });
            }
        },
        horizontalNavigationMenuIcon: function() {
            if (settings.themelayout === "horizontal") {
                switch (settings.horizontalNavigationMenuIcon) {
                    case false:
                        $('#' + oid + '.pcoded .pcoded-navbar .pcoded-item > li > a .pcoded-micon').hide();
                        $('#' + oid + '.pcoded .pcoded-navbar .pcoded-item.pcoded-search-item > li > a .pcoded-micon').show();
                        break;
                    default:
                }
            }
        },
        HandleHorizontalMobileMenuToggle: function() {
            if (settings.themelayout === "horizontal") {
                $('#mobile-collapse').on('click', function() {
                    $('.pcoded-navbar').toggleClass('show-menu')
                });
            }
        },


        HandleVerticalScrollbar: function() {
            if (settings.themelayout === "vertical") {
                satnt = settings.defaultVerticalMenu.desktop;
                if (satnt === "expanded" || satnt === "compact") {
                    mt = settings.MenuTrigger;
                    if (mt === "click") {
                        $(window).on("load", function() {
                            $(".sidebar_toggle a").click(function(e) {
                                e.preventDefault();
                                var $this = $(this);
                                rel = $this.attr("rel");
                                el = $(".pcoded-navbar");
                                // if (el.hasClass("mCS_destroyed")) {
                                //     el.mCustomScrollbar({
                                //         axis:"y",
                                //         setHeight:"calc(100% - 80px)",
                				// 		autoHideScrollbar: false,
                				// 		scrollInertia: 100,
                				// 		theme:"minimal",
                                //     });
                                // } else {
                                //     el.mCustomScrollbar("destroy");
                                // }
                            });
                        });
                    }
                    // $(".main-menu").mCustomScrollbar({
                    //     axis:"y",
                    //     setHeight:"calc(100% - 80px)",
					// 	autoHideScrollbar: false,
					// 	scrollInertia: 100,
					// 	theme:"minimal",
                    // });
                }
            }
        },

        HandleDocumentClickEvent: function() {
            function closeSubMenu() {
                $(document).on('click', function(evt) {
                    var target = $(evt.target);
                    var sdt = $('#' + oid).attr('pcoded-device-type');
                    var vnt = $('#' + oid).attr('vertical-nav-type');
                    var el = $('#' + oid + ' .pcoded-item li');
                    if (!target.parents('.pcoded-item').length) {
                        if (sdt != "phone") {
                            if (vnt != "expanded") {
                                el.removeClass('pcoded-trigger');
                            }
                        }
                    }
                });
            };

            function closeLeftbarSearch() {
                $(document).on('click', function(evt) {
                    var target = $(evt.target);
                    var el = $('#' + oid + ' .pcoded-search');
                    if (!target.parents('.pcoded-search').length) {
                        el.removeClass('open');
                    }

                });
            };

            closeSubMenu();
            closeLeftbarSearch();
        },




        HandleHorizontalStickyNavigation: function() {
            switch (settings.horizontalstickynavigation) {
                case true:
                    $(window).on('scroll', function() {
                        var scrolltop = $(this).scrollTop();

                        if (scrolltop >= 100) {
                            $('.pcoded-navbar').addClass('stickybar');
                            $('stickybar').fadeIn(3000);
                        } else if (scrolltop <= 100) {
                            $('.pcoded-navbar').removeClass('stickybar')
                            $('.stickybar').fadeOut(3000);
                        }
                    });
                    break;
                case false:
                    $('.pcoded-navbar').removeClass('stickybar')
                    break;
                default:
            }
        },
        HandleSubMenuOffset: function() {
            switch (settings.themelayout) {
                case 'horizontal':
                    var trigger = settings.SubMenuTrigger;
                    if (trigger === "hover") {
                        $("li.pcoded-hasmenu").on('mouseenter mouseleave', function(e) {
                            if ($('.pcoded-submenu', this).length) {
                                var elm = $('.pcoded-submenu:first', this);
                                var off = elm.offset();
                                var l = off.left;
                                var w = elm.width();
                                var docH = $(window).height();
                                var docW = $(window).width();
								//console.log("length = " + $('.pcoded-submenu', this).length + " off=" + off + " l=" + l+ " w=" + w + " doch=" + docH + " docW=" + docW)
                                var isEntirelyVisible = (l + w <= docW);
                                if (!isEntirelyVisible) {
                                    $(this).addClass('edge');
                                } else {
                                    $(this).removeClass('edge');
                                }
                            }
                        });
                    } else {
                        $("li.pcoded-hasmenu").on('click', function(e) {
                            e.preventDefault();
                            if ($('.pcoded-submenu', this).length) {
                                var elm = $('.pcoded-submenu:first', this);
                                var off = elm.offset();
                                var l = off.left;
                                var w = elm.width();
                                var docH = $(window).height();
                                var docW = $(window).width();

                                var isEntirelyVisible = (l + w <= docW);
                                if (!isEntirelyVisible) {
                                    $(this).toggleClass('edge');
                                }

                            }
                        });
                    }
                    break;
                default:
            }
        },
        HandleHorizontalItemIsCentered: function() {
            if (settings.themelayout === "horizontal") {
                switch (settings.horizontalNavIsCentered) {
                    case true:
                        $('#' + oid + ' .pcoded-navbar').addClass("isCentered");
                        break;
                    case false:
                        $('#' + oid + ' .pcoded-navbar').removeClass("isCentered");
                        break;
                    default:
                }
            }
        },
        HandleHorizontalItemAlignment: function() {
            var layout = settings.themelayout;
            if (layout === "horizontal") {
                function branditemalignment() {
                    var elm = $('#' + oid + '.pcoded .pcoded-navbar .pcoded-brand');
                    if (settings.horizontalBrandItem === true) {

                        switch (settings.horizontalBrandItemAlign) {
                            case 'left':
                                elm.removeClass('pcoded-right-align');
                                elm.addClass('pcoded-left-align');
                                break;
                            case 'right':
                                elm.removeClass('pcoded-left-align');
                                elm.addClass('pcoded-right-align');
                                break;
                            default:
                        }
                    } else {
                        elm.hide();
                    }
                };

                function leftitemalignment() {
                    var elm = $('#' + oid + '.pcoded .pcoded-navbar .pcoded-item.pcoded-left-item');
                    if (settings.horizontalLeftNavItem === true) {
                        switch (settings.horizontalLeftNavItemAlign) {
                            case 'left':
                                elm.removeClass('pcoded-right-align');
                                elm.addClass('pcoded-left-align');
                                break;
                            case 'right':
                                elm.removeClass('pcoded-left-align');
                                elm.addClass('pcoded-right-align');
                                break;
                            default:
                        }
                    } else {
                        elm.hide();
                    }
                };

                function rightitemalignment() {
                    var elm = $('#' + oid + '.pcoded .pcoded-navbar .pcoded-item.pcoded-right-item');
                    if (settings.horizontalRightItem === true) {
                        switch (settings.horizontalRightItemAlign) {
                            case 'left':
                                elm.removeClass('pcoded-right-align');
                                elm.addClass('pcoded-left-align');
                                break;
                            case 'right':
                                elm.removeClass('pcoded-left-align');
                                elm.addClass('pcoded-right-align');
                                break;
                            default:
                        }
                    } else {
                        elm.hide();
                    }
                };

                function searchitemalignment() {
                    var elm = $('#' + oid + '.pcoded .pcoded-navbar .pcoded-search-item');
                    if (settings.horizontalSearchItem === true) {
                        switch (settings.horizontalsearchItemAlign) {
                            case 'left':
                                elm.removeClass('pcoded-right-align');
                                elm.addClass('pcoded-left-align');
                                break;
                            case 'right':
                                elm.removeClass('pcoded-left-align');
                                elm.addClass('pcoded-right-align');
                                break;
                            default:
                        }
                    } else {
                        elm.hide();
                    }
                };
                if (settings.horizontalNavIsCentered === false) {
                    branditemalignment();
                    leftitemalignment();
                    rightitemalignment();
                    searchitemalignment();
                }
            }


        },
        HandleVerticalNavigationView: function() {
            switch (settings.themelayout) {
                case 'vertical':
                    var ev = settings.VerticalNavigationView;
                    $('#' + oid + '.pcoded').attr("vnavigation-view", ev);
                    break;
                case 'horizontal':
                    var ev = settings.horizontalNavigationView;
                    $('#' + oid + '.pcoded').attr("hnavigation-view", ev);
                    break;
                default:
            }
        },
        HandleVerticalSubMenuItemIconStyle: function() {
            switch (settings.themelayout) {
                case 'vertical':
                    var ev = settings.VerticalSubMenuItemIconStyle;
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').attr("subitem-icon", ev);
                    break;
                case 'horizontal':
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').attr("subitem-icon", ev);
                    break;
                default:
            }
        },
        HandleNavbarPosition: function() {
            var navposition = settings.FixedNavbarPosition;
            var headerposition = settings.FixedHeaderPosition;
            var rheaderposition = settings.FixedRightHeaderPosition;
            switch (settings.themelayout) {
                case 'vertical':
                    if (navposition == true) {
                        $('#' + oid + ' .pcoded-navbar').attr("pcoded-navbar-position", 'fixed');
                        $('#' + oid + ' .pcoded-header .pcoded-left-header').attr("pcoded-lheader-position", 'fixed');
                    } else {
                        $('#' + oid + ' .pcoded-navbar').attr("pcoded-navbar-position", 'absolute');
                        $('#' + oid + ' .pcoded-header .pcoded-left-header').attr("pcoded-lheader-position", 'absolute');
                    }
                    if (headerposition == true) {
                        $('#' + oid + ' .pcoded-header').attr("pcoded-header-position", 'fixed');
                        $('#' + oid + ' .pcoded-main-container').css('margin-top', $(".pcoded-header").outerHeight());

                    } else {
                        $('#' + oid + ' .pcoded-header').attr("pcoded-header-position", 'relative');
                        $('#' + oid + ' .pcoded-main-container').css('margin-top', '0px');
                    }
                    break;
                case 'horizontal':
                    if (navposition == true) {
                        $('#' + oid + ' .pcoded-navbar').attr("pcoded-navbar-position", 'fixed');
                        $('#' + oid + ' .pcoded-header .pcoded-left-header').attr("pcoded-lheader-position", 'fixed');
                    } else {
                        $('#' + oid + ' .pcoded-navbar').attr("pcoded-navbar-position", 'absolute');
                        $('#' + oid + ' .pcoded-header .pcoded-left-header').attr("pcoded-lheader-position", 'absolute');
                    }
                    if (headerposition == true) {
                        $('#' + oid + ' .pcoded-header').attr("pcoded-header-position", 'fixed');
                        $('#' + oid + ' .pcoded-main-container').css('margin-top', $(".pcoded-header").outerHeight());

                    } else {
                        $('#' + oid + ' .pcoded-header').attr("pcoded-header-position", 'relative');
                        $('#' + oid + ' .pcoded-main-container').css('margin-top', '0px');
                    }
                    break;
                default:
            }
        },
        HandleOptionSelectorPanel: function() {
            $('.selector-toggle > a').on("click", function() {
                //debugger;
                $('#styleSelector').toggleClass('open')
            });

        },
        HandleDropDownIconStyle: function() {
            var ev = settings.DropDownIconStyle;
            switch (settings.themelayout) {
                case 'vertical':
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').attr("dropdown-icon", ev);
                    break;
                case 'horizontal':
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').attr("dropdown-icon", ev);
                    break;
                default:
            }
        },
        HandleSubItemBorder: function() {
            switch (settings.SubItemBorder) {
                case true:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("subitem-border", "true");
                    break;
                case false:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("subitem-border", "false");
                    break;
                default:
            }
        },
        HandleBorderStyle: function() {
            var ev = settings.ItemBorderStyle;
            switch (settings.ItemBorder) {
                case true:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("item-border-style", ev);
                    break;
                case false:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("item-border-style", "");
                    break;
                default:
            }
        },
        HandleItemBorder: function() {
            switch (settings.ItemBorder) {
                case true:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("item-border", "true");
                    break;
                case false:
                    $('#' + oid + ' .pcoded-navbar .pcoded-item').attr("item-border", "false");
                    break;
                default:
            }
        },
        HandleActiveItemStyle: function() {
            var ev = settings.ActiveItemStyle;
            if (ev != undefined && ev != "") {
                $('#' + oid + ' .pcoded-navbar').attr("active-item-style", ev);
            } else {
                $('#' + oid + ' .pcoded-navbar').attr("active-item-style", "style0");
            }
        },
        Handlemenutype: function() {
            var ev = settings.menutype;
            var ef = settings.freamtype;
            var nimg = settings.NavbarImage;
            var img = settings.ActiveNavbarImage;
            if (ev != undefined && ev != "") {
                $('#' + oid).attr("nav-type", ev);
            } else {
                $('#' + oid).attr("nav-type", "st1");
            }
            if (ef != undefined && ef != "") {
                $('#' + oid).attr("fream-type", ef);
            } else {
                $('#' + oid).attr("fream-type", "theme1");
            }
            if (nimg != undefined && nimg != "") {
                $('#' + oid).attr("sidebar-img", nimg);
            } else {
                $('#' + oid).attr("sidebar-img", "false");
            }
            if (img != undefined && img != "") {
                $('#' + oid).attr("sidebar-img-type", img);
            } else {
                $('#' + oid).attr("sidebar-img-type", "img1");
            }
        },
        Handlelayoutvartype: function() {
            var ev = settings.layouttype;
            if (ev != undefined && ev != "") {
                $('#' + oid).attr("layout-type", ev);
            } else {
                $('#' + oid).attr("layout-type", "light");
            }
        },
        HandleThemeBackground: function() {
            function themebackgroundpattern() {
                var ev = settings.ThemeBackgroundPattern;
                if (ev != undefined && ev != "") {
                    $('body').attr("themebg-pattern", ev);
                } else {
                    $('body').attr("themebg-pattern", "pattern1");
                }
            };

            function setheadertheme() {
                var ev = settings.HeaderBackground;
                if (ev != undefined && ev != "") {
                    $('#' + oid + ' .pcoded-header').attr("header-theme", ev);
                } else {
                    $('#' + oid + ' .pcoded-header').attr("header-theme", "theme1");
                }
            };

            function setlheadertheme() {
                var ev = settings.LHeaderBackground;
                if (ev != undefined && ev != "") {
                    $('#' + oid + ' .pcoded-header .navbar-logo').attr("logo-theme", ev);
                    $('#' + oid + ' .pcoded-navigatio-lavel').attr("menu-title-theme", "theme5");
                } else {
                    $('#' + oid + ' .pcoded-header .navbar-logo').attr("logo-theme", "theme4");
                    $('#' + oid + ' .pcoded-navigatio-lavel').attr("menu-title-theme", "theme5");
                }
            };

            function setnavbartheme() {
                var ev = settings.NavbarBackground;
                if (ev != undefined && ev != "") {
                    $('#' + oid + ' .pcoded-navbar').attr("navbar-theme", ev);
                } else {
                    $('#' + oid + ' .pcoded-navbar').attr("navbar-theme", "theme1");
                }
            };

            function setactiveitemtheme() {
                var ev = settings.ActiveItemBackground;
                if (ev != undefined && ev != "") {
                    $('#' + oid + ' .pcoded-navbar').attr("active-item-theme", ev);
                } else {
                    $('#' + oid + ' .pcoded-navbar').attr("active-item-theme", "theme1");
                }
            };

            function setsubitemtheme() {
                var ev = settings.SubItemBackground;
                if (ev != undefined && ev != "") {
                    $('#' + oid + ' .pcoded-navbar').attr("sub-item-theme", ev);
                } else {
                    $('#' + oid + ' .pcoded-navbar').attr("sub-item-theme", "theme1");
                }
            };
            themebackgroundpattern();
            setheadertheme();
            setlheadertheme();
            setnavbartheme();
            setactiveitemtheme();
            setsubitemtheme();

        },
        HandleVerticalLeftHeader: function() {
            if (settings.themelayout === "vertical") {
                switch (settings.collapseVerticalLeftHeader) {
                    case true:
                        $('#' + oid + ' .pcoded-header').addClass('iscollapsed');
                        $('#' + oid + ' .pcoded-header').removeClass('nocollapsed');
                        $('#' + oid + '.pcoded').addClass('iscollapsed');
                        $('#' + oid + '.pcoded').removeClass('nocollapsed');

                        /*  $('#'+oid + ' .pcoded-header.nocollapsed .pcoded-left-header').css('width', '');  */
                        break;
                    case false:
                        $('#' + oid + ' .pcoded-header').removeClass('iscollapsed');
                        $('#' + oid + ' .pcoded-header').addClass('nocollapsed');
                        $('#' + oid + '.pcoded').removeClass('iscollapsed');
                        $('#' + oid + '.pcoded').addClass('nocollapsed');
                        /*  $('#'+oid + ' .pcoded-header.nocollapsed .pcoded-left-header').css('width', $(".pcoded-navbar").width());  */
                        break;
                    default:
                }
            } else {
                return false;
            }
        },
        HandleOffcanvasMenu: function() {
            if (settings.themelayout === "vertical") {
                var vnt = $('#' + oid).attr("vertical-nav-type");
                if (vnt == "offcanvas") {
                    $('#' + oid).attr("vertical-layout", "wide");
                }
            }
        },
        HandleActiveItem: function() {
            /*switch(settings.activeMenuClass){
            	case  "active":
            		$('li:not("li.pcoded-hasmenu")').on( 'click', function () {
            			var str = $(this).closest('.pcoded-submenu').length;
            			if (str === 0){
            				$(this).closest('.pcoded-inner-navbar').find('li.active').removeClass('active');
            				$(this).addClass('active');

            			}else{
            				if($(this).hasClass('active')){
            					$(this).removeClass('active');
            				}else{
            					$(this).closest('.pcoded-inner-navbar').find('li.active').removeClass('active');
            					$(this).parents('.pcoded-hasmenu').addClass('active');
            					$(this).addClass('active');
            				}
            			}
            		});
            		break;
            	case  false:
            		$('.pcoded-header').removeClass(settings.navbbgclass);
            		break;
            	default:
            }*/
        },
        HandleSubMenuTrigger: function() {
            switch (settings.SubMenuTrigger) {
                case 'hover':
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').addClass('is-hover');
                    // Initialize
                    var $window = $(window);
                    var $dropdown = $('.pcoded-submenu > li');
                    var currentSize = $window.width();
                    var currentEvent = '';
                    // Attach current event on load
                    (currentSize >= 767) ? bindTwo('hover'): bindTwo('click');
                    // Atach window resize event
                    $window.resize(function() {
                        // get windows new size
                        var newSize = $window.width();
                        // Exit if size is same
                        if (currentSize == newSize) {
                            return;
                        }
                        // Check if size changed, if its greater/smaller and which current event is attached so we dont attach multiple events
                        if (newSize >= 767 && currentEvent != 'hover') {
                            bindTwo('hover');
                        } else if (newSize < 767 && currentEvent != 'click') {
                            bindTwo('click');
                        }

                        // Update new size
                        currentSize = newSize;
                    });

                    function bindTwo(eventType) {
                        if (eventType == 'hover') {
                            // Update currentEvent
                            currentEvent = eventType;
                            // Make sure all previous events are removed and attach hover
                            $dropdown.off('click').off('mouseenter mouseleave').hover(
                                function() {
                                    $(this).addClass('pcoded-trigger');
                                },
                                function() {
                                    $(this).removeClass('pcoded-trigger');
                                }
                            );
                        } else if (eventType == 'click') {
                            // Update currentEvent
                            currentEvent = eventType;
                            // Make sure all previous events are removed and attach hover
                            $dropdown.off('mouseenter mouseleave').off('click').on('click',
                                function(e) {
                                    e.stopPropagation();
                                    var str = $(this).closest('.pcoded-submenu').length;
                                    if (str === 0) {
                                        if ($(this).hasClass('pcoded-trigger')) {
                                            $(this).removeClass('pcoded-trigger');
                                        } else {
                                            $(this).closest('.pcoded-inner-navbar').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                                            $(this).addClass('pcoded-trigger');
                                        }
                                    } else {
                                        if ($(this).hasClass('pcoded-trigger')) {
                                            $(this).removeClass('pcoded-trigger');
                                        } else {
                                            $(this).closest('.pcoded-submenu').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                                            $(this).addClass('pcoded-trigger');
                                        }
                                    }
                                }
                            );
                        }
                    }
                    break;
                case 'click':
                    $('#' + oid + ' .pcoded-navbar .pcoded-hasmenu').removeClass('is-hover');
                    $(".pcoded-submenu > li").on('click', function(e) {
                        e.stopPropagation();
                        var str = $(this).closest('.pcoded-submenu').length;
                        if (str === 0) {
                            if ($(this).hasClass('pcoded-trigger')) {
                                $(this).removeClass('pcoded-trigger');
                            } else {
                                $(this).closest('.pcoded-inner-navbar').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                                $(this).addClass('pcoded-trigger');
                            }
                        } else {
                            if ($(this).hasClass('pcoded-trigger')) {
                                $(this).removeClass('pcoded-trigger');
                            } else {
                                $(this).closest('.pcoded-submenu').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                                $(this).addClass('pcoded-trigger');
                            }
                        }
                    });
                    break;
            }
        },
        HandleMenuTrigger: function() {

            switch (settings.MenuTrigger) {
                case 'hover':
                    $('#' + oid + ' .pcoded-navbar').addClass('is-hover');
                    // Initialize
                    var $window = $(window);
                    var $dropdown = $(".pcoded-item > li");
                    var currentSize = $window.width();
                    var currentEvent = '';
                    // Attach current event on load
                    (currentSize >= 767) ? bindOne('hover'): bindOne('click');
                    // Atach window resize event
                    $window.resize(function() {
                        // get windows new size
                        var newSize = $window.width();
                        // Exit if size is same
                        if (currentSize == newSize) {
                            return;
                        }
                        // Check if size changed, if its greater/smaller and which current event is attached so we dont attach multiple events
                        if (newSize >= 767 && currentEvent != 'hover') {
                            bindOne('hover');
                        } else if (newSize < 767 && currentEvent != 'click') {
                            bindOne('click');
                        }

                        // Update new size
                        currentSize = newSize;
                    });

                    function bindOne(eventType) {
                        if (eventType == 'hover') {
                            // Update currentEvent
                            currentEvent = eventType;
                            // Make sure all previous events are removed and attach hover
                            $dropdown.off('click').off('mouseenter mouseleave').hover(
                                function() {
                                    $(this).addClass('pcoded-trigger');
                                },
                                function() {
                                    $(this).removeClass('pcoded-trigger');
                                }
                            );
                        } else if (eventType == 'click') {
                            // Update currentEvent
                            currentEvent = eventType;
                            // Make sure all previous events are removed and attach hover
                            $dropdown.off('mouseenter mouseleave').off('click').on('click',
                                function() {
                                    if ($(this).hasClass('pcoded-trigger')) {
                                        $(this).removeClass('pcoded-trigger');
                                    } else {
                                        $(this).closest('.pcoded-inner-navbar').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                                        $(this).addClass('pcoded-trigger');
                                    }
                                }
                            );
                        }
                    }
                    break;
                case 'click':
                    $('#' + oid + ' .pcoded-navbar').removeClass('is-hover');
                    $(".pcoded-item > li ").on('click', function() {
                        if ($(this).hasClass('pcoded-trigger')) {
                            $(this).removeClass('pcoded-trigger');
                        } else {
                            $(this).closest('.pcoded-inner-navbar').find('li.pcoded-trigger').removeClass('pcoded-trigger');
                            $(this).addClass('pcoded-trigger');
                        }

                    });
                    break;
            }
        },
        HandleMenuOnClick: function() {
            var totalwidth = $(window)[0].innerWidth;
            if (settings.themelayout === "vertical") {
                $('#mobile-collapse,.sidebar_toggle a, .pcoded-overlay-box,.menu-toggle a').on("click", function() {
                    $(this).parent().find('.menu-icon').toggleClass("is-clicked");
                    var dt = $('#' + oid).attr("pcoded-device-type");
                    if (dt == "desktop") {
                        var dmc = settings.onToggleVerticalMenu.desktop;
                        var dm = settings.defaultVerticalMenu.desktop;
                        var dn = $('#' + oid).attr("vertical-nav-type");
                        if (dn == dm) {
                            $('#' + oid).attr("vertical-nav-type", dmc);
                        } else if (dn == dmc) {
                            $('#' + oid).attr("vertical-nav-type", dm);
                        } else {
                            return false;
                        }
                    } else if (dt == "tablet") {
                        var tmc = settings.onToggleVerticalMenu.tablet;
                        var tm = settings.defaultVerticalMenu.tablet;
                        var tn = $('#' + oid).attr("vertical-nav-type");
                        if (tn == tm) {
                            $('#' + oid).attr("vertical-nav-type", tmc);
                        } else if (dn == dmc) {
                            $('#' + oid).attr("vertical-nav-type", tm);
                        }
                    } else if (dt == "phone") {
                        var pmc = settings.onToggleVerticalMenu.phone;
                        var pm = settings.defaultVerticalMenu.phone;
                        var pn = $('#' + oid).attr("vertical-nav-type");
                        if (pn == pm) {
                            $('#' + oid).attr("vertical-nav-type", pmc);
                        } else if (dn == dmc) {
                            $('#' + oid).attr("vertical-nav-type", pm);
                        }
                    }
                    $('.pcoded').addClass("pcoded-toggle-animate");
                    setTimeout(function() {
                        $('.pcoded').removeClass("pcoded-toggle-animate");
                    }, 250);
                });
            } else if (settings.themelayout === "horizontal") {
                if (totalwidth >= 768 && totalwidth <= 992) {
                    $('#' + oid).attr("pcoded-device-type", "tablet");
                } else if (totalwidth < 768) {
                    $('#' + oid).attr("pcoded-device-type", "phone");
                } else {
                    $('#' + oid).attr("pcoded-device-type", "desktop");
                }
            }
        },
        Handlecomponetheight: function() {
            function setHeight() {
                var WH = $(window).height();
                var HH = $(".pcoded-header").innerHeight();
                var NH = $(".pcoded-navbar").innerHeight();
                var FH = $(".pcoded-footer").innerHeight();
                var contentHH = WH - HH;
                var contentVH = WH - HH;
                var lpanelH = WH - HH;
                // if (settings.themelayout === "horizontal" ) {
                // 	$(".pcoded-navbar").css('height', contentHH);
                // } else if (settings.themelayout === "vertical" ) {
                // 	if ( contentVH >= lpanelH ){
                // 		$(".pcoded-navbar").css('height', contentVH);
                // 	}else {
                // 		$(".pcoded-navbar").css('height', lpanelH);
                // 	}
                // } else {
                // 	return false;
                // }
            };
            setHeight();

            $(window).resize(function() {
                setHeight();
            });

        },
        HandleDeviceType: function() {
            function devicesize() {
                var totalwidth = $(window)[0].innerWidth;
                if (settings.themelayout === "vertical") {
                    if (totalwidth >= 768 && totalwidth <= 992) {

                        $('#' + oid).attr("pcoded-device-type", "tablet");
                        var value = settings.defaultVerticalMenu.tablet;
                        if (value != undefined && value != "") {
                            $('#' + oid).attr("vertical-nav-type", value);
                        } else {
                            $('#' + oid).attr("vertical-nav-type", "collapsed");
                        }

                        var ev = settings.verticalMenueffect.tablet;
                        if (ev != undefined && value != "") {
                            $('#' + oid).attr("vertical-effect", ev);
                        } else {
                            $('#' + oid).attr("vertical-effect", "shrink");
                        }

                    } else if (totalwidth < 768) {

                        $('#' + oid).attr("pcoded-device-type", "phone");

                        var value = settings.defaultVerticalMenu.phone;
                        if (value != undefined && value != "") {
                            $('#' + oid).attr("vertical-nav-type", value);
                        } else {
                            $('#' + oid).attr("vertical-nav-type", "offcanvas");
                        }

                        var ev = settings.verticalMenueffect.phone;
                        if (ev != undefined && value != "") {
                            $('#' + oid).attr("vertical-effect", ev);
                        } else {
                            $('#' + oid).attr("vertical-effect", "push");
                        }

                    } else {
                        $('#' + oid).attr("pcoded-device-type", "desktop");
                        var value = settings.defaultVerticalMenu.desktop;
                        if (value != undefined && value != "") {
                            $('#' + oid).attr("vertical-nav-type", value);
                        } else {
                            $('#' + oid).attr("vertical-nav-type", "expanded");
                        }

                        var ev = settings.verticalMenueffect.desktop;
                        if (ev != undefined && value != "") {
                            $('#' + oid).attr("vertical-effect", ev);
                        } else {
                            $('#' + oid).attr("vertical-effect", "shrink");
                        }

                    }
                } else if (settings.themelayout === "horizontal") {
                    if (totalwidth >= 768 && totalwidth <= 992) {
                        $('#' + oid).attr("pcoded-device-type", "tablet");
                    } else if (totalwidth < 768) {
                        $('#' + oid).attr("pcoded-device-type", "phone");
                    } else {
                        $('#' + oid).attr("pcoded-device-type", "desktop");
                    }

                }
            };
            devicesize();

            $(window).resize(function() {
                tw = $(window)[0].innerWidth;
                dt = $('#' + oid).attr('pcoded-device-type')
                if (dt == 'desktop' && tw < 992) {
                    devicesize();
                } else if (dt == 'phone' && tw > 768) {
                    devicesize();
                } else if (dt == 'tablet' && tw < 768) {
                    devicesize();
                } else if (dt == 'tablet' && tw > 992) {
                    devicesize();
                }
            });
        },
        HandleMenulayout: function() {
            if (settings.themelayout === "vertical") {
                switch (settings.verticalMenulayout) {
                    case 'wide':
                        $('#' + oid).attr("vertical-layout", "wide");
                        break;
                    case 'box':
                        $('#' + oid).attr("vertical-layout", "box");
                        break;
                    case 'widebox':
                        $('#' + oid).attr("vertical-layout", "widebox");
                        break;
                    default:
                }
            } else if (settings.themelayout === "horizontal") {
                switch (settings.horizontalMenulayout) {
                    case 'wide':
                        $('#' + oid).attr("horizontal-layout", "wide");
                        break;
                    case 'box':
                        $('#' + oid).attr("horizontal-layout", "box");
                        break;
                    case 'widebox':
                        $('#' + oid).attr("horizontal-layout", "widebox");
                        break;
                    default:
                }
            } else {
                return false;
            }

        },
        HandlehorizontalMenuplacement: function() {
            if (settings.themelayout === "horizontal") {
                switch (settings.horizontalMenuplacement) {
                    case 'bottom':
                        $('#' + oid).attr("horizontal-placement", "bottom");
                        break;
                    case 'top':
                        $('#' + oid).attr("horizontal-placement", "top");
                        break;
                    default:
                }
            } else {
                $('#' + oid).removeAttr("horizontal-placement");
            }
        },
        HandleverticalMenuplacement: function() {
            if (settings.themelayout === "vertical") {
                switch (settings.verticalMenuplacement) {
                    case 'left':
                        $('#' + oid).attr("vertical-placement", "left");
                        break;
                    case 'right':
                        $('#' + oid).attr("vertical-placement", "right");
                        break;
                    default:
                }
            } else {
                $('#' + oid).removeAttr("vertical-placement");
            }
        },
        Handlethemelayout: function() {
            switch (settings.themelayout) {
                case 'horizontal':
                    $('#' + oid).attr("theme-layout", "horizontal");
                    break;
                case 'vertical':
                    $('#' + oid).attr("theme-layout", "vertical");
                    break;
                default:
            }
        },
    };
    PcodedMenu.PcodedMenuInit();
};
// menu [ vertical ]
$(window).scroll(function() {
    if ($(this).scrollTop() > 80) {
        $('.pcoded[theme-layout="vertical"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('position', 'fixed');
        $('.pcoded[theme-layout="vertical"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('top', 0);
    } else {
        $('.pcoded[theme-layout="vertical"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('position', 'absolute');
        $('.pcoded[theme-layout="vertical"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('top', 'auto');
    }
});
// menu [ horizontal ]
$(window).scroll(function() {
    if ($(this).scrollTop() > 80) {
        $('.pcoded[theme-layout="horizontal"][pcoded-device-type="desktop"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('position', 'fixed');
        $('.pcoded[theme-layout="horizontal"][pcoded-device-type="desktop"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('top', 0);
    } else {
        $('.pcoded[theme-layout="horizontal"][pcoded-device-type="desktop"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('position', 'absolute');
        $('.pcoded[theme-layout="horizontal"][pcoded-device-type="desktop"] .pcoded-navbar[pcoded-navbar-position="fixed"][pcoded-header-position="relative"]').css('top', 'auto');
    }
});


$(document).ready(function () {
    $('.pcoded-navbar .pcoded-hasmenu').attr('subitem-icon', 'style1');
    $("#pcoded").pcodedmenu({
        themelayout: 'horizontal',
        horizontalMenuplacement: 'top',
        horizontalBrandItem: true,
        horizontalLeftNavItem: true,
        horizontalRightItem: true,
        horizontalSearchItem: true,
        horizontalBrandItemAlign: 'left',
        horizontalLeftNavItemAlign: 'left',
        horizontalRightItemAlign: 'right',
        horizontalsearchItemAlign: 'right',
        horizontalMobileMenu: true,
        MenuTrigger: 'click',
        SubMenuTrigger: 'click',
        activeMenuClass: 'active',
        ThemeBackgroundPattern: 'pattern6',
        HeaderBackground: 'theme6',
        LHeaderBackground: 'theme1',
        NavbarBackground: 'themelight1',
        ActiveItemBackground: 'theme4',
        SubItemBackground: 'theme1',
        menutype: 'st6', // Value should be st1,st2,st3
        freamtype: "theme1",
        ActiveItemStyle: 'style0',
        ItemBorder: true,
        ItemBorderStyle: 'none',
        SubItemBorder: true,
        DropDownIconStyle: 'style1',
        FixedNavbarPosition: true,
        FixedHeaderPosition: false,
        horizontalNavIsCentered: false,
        horizontalstickynavigation: false,
        horizontalNavigationMenuIcon: true,
    });

    function freamtype() {
        $('.theme-color > a.fream-type').on("click", function () {
            var value = $(this).attr("fream-type");
            $('.pcoded').attr('fream-type', value);

            $('.pcoded-header').attr("header-theme", "themelight" + value);
            $('.pcoded-navbar').attr("navbar-theme", "theme" + value);
            $('.navbar-logo').attr("logo-theme", "theme" + value);

        });
    };
    freamtype();

    /* Left header logo Change function Start */
    function handleogortheme() {
        $('.theme-color > a.logo-theme').on("click", function () {
            var logotheme = $(this).attr("logo-theme");
            $('.navbar-logo').attr("logo-theme", logotheme);
        });
    };
    handleogortheme();

    //Vertical Header Position change function Start

    function handleheaderposition() {
        $('#header-position').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded-header').attr("pcoded-header-position", 'fixed');
                $('.pcoded-navbar').attr("pcoded-header-position", 'fixed');
                $('.pcoded-main-container').css('margin-top', $(".pcoded-header").outerHeight());
            } else {
                $('.pcoded-header').attr("pcoded-header-position", 'relative');
                $('.pcoded-navbar').attr("pcoded-header-position", 'relative');
                $('.pcoded-main-container').css('margin-top', '0px');
            }
        });
    };

    handleheaderposition();
    /* Vertical Header Position change function Close*/

    function handleheadertheme() {
        $('.theme-color > a.header-theme').on("click", function () {
            var headertheme = $(this).attr("header-theme");
            $('.pcoded-header').attr("header-theme", headertheme);
            $('.navbar-logo').attr("logo-theme", headertheme);
        });
    };
    handleheadertheme();
    /* Navbar Theme Change function Start */
    function handlenavbartheme() {
        $('.theme-color > a.navbar-theme').on("click", function () {
            var navbartheme = $(this).attr("navbar-theme");
            $('.pcoded-navbar').attr("navbar-theme", navbartheme);
            $('.navbar-logo').attr("navbar-theme", navbartheme);
        });
    };

    handlenavbartheme();
    /* Navbar Theme Change function Close */

    /* Navbar Theme Change function Start */
    function handleActiveItemTheme() {
        $('.theme-color > a.active-item-theme').on("click", function () {
            var AtciveItemTheme = $(this).attr("active-item-theme");
            $('.pcoded-navbar').attr("active-item-theme", AtciveItemTheme);
        });
    };

    handleActiveItemTheme();
    /* Navbar Theme Change function Close */


    /* Theme background pattren Change function Start */
    function handlethemebgpattern() {
        $('.theme-color > a.themebg-pattern').on("click", function () {
            var themebgpattern = $(this).attr("themebg-pattern");
            $('body').attr("themebg-pattern", themebgpattern);
        });
    };

    handlethemebgpattern();
    /* Theme background pattren Change function Close */

    /* Theme Layout Change function start*/
    function handlethemehorizontallayout() {
        $('#theme-layout').val('wide').on('change', function (get_value) {
            get_value = $(this).val();
            $('.pcoded').attr('horizontal-layout', get_value);
        });
    };

    handlethemehorizontallayout();
    /* Theme Layout Change function Close*/

    /*Menu Placement change function start*/
    function handleMenuPlacement() {
        $('#navbar-placement').val('top').on('change', function (get_value) {
            get_value = $(this).val();
            $('.pcoded').attr('horizontal-placement', get_value);
        });
    };

    handleMenuPlacement();
    /*Menu Placement change function Close*/



    /*Item border change function Start*/
    function handleIItemBorder() {
        $('#item-border').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded-navbar .pcoded-item').attr('item-border', 'false');
            } else {
                $('.pcoded-navbar .pcoded-item').attr('item-border', 'true');
            }
        });
    };

    handleIItemBorder();
    /*Item border change function Close*/


    /*SubItem border change function Start*/
    function handleSubIItemBorder() {
        $('#subitem-border').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded-navbar .pcoded-item').attr('subitem-border', 'false');
            } else {
                $('.pcoded-navbar .pcoded-item').attr('subitem-border', 'true');
            }
        });
    };

    handleSubIItemBorder();
    /*SubItem border change function Close*/


    /*Item border Style change function Start*/
    function handlBoderStyle() {
        $('#vertical-border-style').val('solid').on('change', function (get_value) {
            get_value = $(this).val();
            $('.pcoded-navbar .pcoded-item').attr('item-border-style', get_value);
        });
    };

    handlBoderStyle();
    /*Item border Style change function Close*/


    // demo 12 st

    /* Vertical Dropdown Icon change function Start*/
    function handleVerticalDropDownIconStyle() {
        $('#vertical-dropdown-icon').val('style1').on('change', function (get_value) {
            get_value = $(this).val();
            $('.pcoded-navbar .pcoded-hasmenu').attr('dropdown-icon', get_value);
        });
    };

    handleVerticalDropDownIconStyle();
    /* Vertical Dropdown Icon change function Close*/
    /* Vertical SubItem Icon change function Start*/

    function handleVerticalSubMenuItemIconStyle() {
        $('#vertical-subitem-icon').val('style5').on('change', function (get_value) {
            get_value = $(this).val();
            $('.pcoded-navbar .pcoded-hasmenu').attr('subitem-icon', get_value);
        });
    };

    handleVerticalSubMenuItemIconStyle();
    /* Vertical SubItem Icon change function Close*/

    // demo 12 ed

    /* Horizontal Navbar Position change function Start*/
    function handleNavigationPosition() {
        $('#sidebar-position').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded-navbar').attr("pcoded-navbar-position", 'fixed');
            } else {
                $('.pcoded-navbar').attr("pcoded-navbar-position", 'relative');
            }
        });
    };

    handleNavigationPosition();

    /* Horizontal Navbar Position change function Close*/
    /* Hide Show Menu Icon */
    function handleNavigationMenuIcon() {
        $('#menu-icons').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded .pcoded-navbar .pcoded-item > li > a .pcoded-micon:not(".pcoded-search-item .pcoded-micon")').hide();
            } else {
                $('.pcoded .pcoded-navbar .pcoded-item > li > a .pcoded-micon:not(".pcoded-search-item .pcoded-micon")').show();
            }
        });
    };

    handleNavigationMenuIcon();
    /* Hide Show Brand logo */
    function handlepcodedBrandVisibility() {
        $('#brand-visibility').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded .pcoded-navbar .pcoded-brand').hide();
            } else {
                $('.pcoded .pcoded-navbar .pcoded-brand').show();
            }
        });
    };

    handlepcodedBrandVisibility();
    function handlePcodedLeftItemVisibility() {
        $('#leftitem-visibility').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-left-item').hide();
            } else {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-left-item').show();
            }
        });
    };
    handlePcodedLeftItemVisibility();
    function handlePcodedRightItemVisibility() {
        $('#rightitem-visibility').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-right-item').hide();
            } else {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-right-item').show();
            }
        });
    };
    handlePcodedRightItemVisibility();
    function handlePcodedSearchItemVisibility() {
        $('#searchitem-visibility').change(function () {
            if ($(this).is(":checked")) {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-search-item').hide();
            } else {
                $('.pcoded .pcoded-navbar .pcoded-item.pcoded-search-item').show();
            }
        });
    };
    handlePcodedSearchItemVisibility();

    function handleBrandItemAlign() {
        $('#branditem-align').val('left').on('change', function (get_value) {
            get_value = $(this).val();
            if (get_value === "left") {
                $('.pcoded-navbar .pcoded-brand').removeClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-brand').addClass('pcoded-left-align');
            } else {
                $('.pcoded-navbar .pcoded-brand').addClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-brand').removeClass('pcoded-left-align');
            }
        });
    };

    handleBrandItemAlign();
    function handleLeftItemAlign() {
        $('#leftitem-align').val('left').on('change', function (get_value) {
            get_value = $(this).val();
            if (get_value === "left") {
                $('.pcoded-navbar .pcoded-left-item').removeClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-left-item').addClass('pcoded-left-align');
            } else {
                $('.pcoded-navbar .pcoded-left-item').addClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-left-item').removeClass('pcoded-left-align');
            }
        });
    };

    handleLeftItemAlign();
    function handleRightItemAlign() {
        $('#rightitem-align').val('left').on('change', function (get_value) {
            get_value = $(this).val();
            if (get_value === "left") {
                $('.pcoded-navbar .pcoded-right-item').removeClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-right-item').addClass('pcoded-left-align');
            } else {
                $('.pcoded-navbar .pcoded-right-item').addClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-right-item').removeClass('pcoded-left-align');
            }
        });
    };

    handleRightItemAlign();
    function handleSearchItemAlign() {
        $('#searchitem-align').val('left').on('change', function (get_value) {
            get_value = $(this).val();
            if (get_value === "left") {
                $('.pcoded-navbar .pcoded-search-item').removeClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-search-item').addClass('pcoded-left-align');
            } else {
                $('.pcoded-navbar .pcoded-search-item').addClass('pcoded-right-align');
                $('.pcoded-navbar .pcoded-search-item').removeClass('pcoded-left-align');
            }
        });
    };

    handleSearchItemAlign();
});
function handlemenutype(get_value) {
    $('.pcoded').attr('nav-type', get_value);
};

handlemenutype("st2");

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

/*
== malihu jquery custom scrollbar plugin == 
Version: 3.1.5 
Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
Author: malihu
Author URI: http://manos.malihu.gr
License: MIT License (MIT)
*/

/*
Copyright Manos Malihutsakis (email: manos@malihu.gr)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*
The code below is fairly long, fully commented and should be normally used in development. 
For production, use either the minified jquery.mCustomScrollbar.min.js script or 
the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
and dependencies (minified). 
*/

(function(factory){
	if(typeof define==="function" && define.amd){
		define(["jquery"],factory);
	}else if(typeof module!=="undefined" && module.exports){
		module.exports=factory;
	}else{
		factory(jQuery,window,document);
	}
}(function($){
(function(init){
	var _rjs=typeof define==="function" && define.amd, /* RequireJS */
		_njs=typeof module !== "undefined" && module.exports, /* NodeJS */
		_dlp=("https:"==document.location.protocol) ? "https:" : "http:", /* location protocol */
		_url="cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
	if(!_rjs){
		if(_njs){
			require("jquery-mousewheel")($);
		}else{
			/* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS 
			(works when mCustomScrollbar fn is called on window load) */
			$.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src="+_dlp+"//"+_url+"%3E%3C/script%3E"));
		}
	}
	init();
}(function(){
	
	/* 
	----------------------------------------
	PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
	----------------------------------------
	*/
	
	var pluginNS="mCustomScrollbar",
		pluginPfx="mCS",
		defaultSelector=".mCustomScrollbar",
	
	
		
	
	
	/* 
	----------------------------------------
	DEFAULT OPTIONS 
	----------------------------------------
	*/
	
		defaults={
			/*
			set element/content width/height programmatically 
			values: boolean, pixels, percentage 
				option						default
				-------------------------------------
				setWidth					false
				setHeight					false
			*/
			/*
			set the initial css top property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setTop:0,
			/*
			set the initial css left property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setLeft:0,
			/* 
			scrollbar axis (vertical and/or horizontal scrollbars) 
			values (string): "y", "x", "yx"
			*/
			axis:"y",
			/*
			position of scrollbar relative to content  
			values (string): "inside", "outside" ("outside" requires elements with position:relative)
			*/
			scrollbarPosition:"inside",
			/*
			scrolling inertia
			values: integer (milliseconds)
			*/
			scrollInertia:950,
			/* 
			auto-adjust scrollbar dragger length
			values: boolean
			*/
			autoDraggerLength:true,
			/*
			auto-hide scrollbar when idle 
			values: boolean
				option						default
				-------------------------------------
				autoHideScrollbar			false
			*/
			/*
			auto-expands scrollbar on mouse-over and dragging
			values: boolean
				option						default
				-------------------------------------
				autoExpandScrollbar			false
			*/
			/*
			always show scrollbar, even when there's nothing to scroll 
			values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean
			*/
			alwaysShowScrollbar:0,
			/*
			scrolling always snaps to a multiple of this number in pixels
			values: integer, array ([y,x])
				option						default
				-------------------------------------
				snapAmount					null
			*/
			/*
			when snapping, snap with this number in pixels as an offset 
			values: integer
			*/
			snapOffset:0,
			/* 
			mouse-wheel scrolling
			*/
			mouseWheel:{
				/* 
				enable mouse-wheel scrolling
				values: boolean
				*/
				enable:true,
				/* 
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto",
				/* 
				mouse-wheel scrolling axis 
				the default scrolling direction when both vertical and horizontal scrollbars are present 
				values (string): "y", "x" 
				*/
				axis:"y",
				/* 
				prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
				values: boolean
					option						default
					-------------------------------------
					preventDefault				null
				*/
				/*
				the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
				values: "auto", integer 
				"auto" uses the default OS/browser value 
				*/
				deltaFactor:"auto",
				/*
				normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
				values: boolean
					option						default
					-------------------------------------
					normalizeDelta				null
				*/
				/*
				invert mouse-wheel scrolling direction 
				values: boolean
					option						default
					-------------------------------------
					invert						null
				*/
				/*
				the tags that disable mouse-wheel when cursor is over them
				*/
				disableOver:["select","option","keygen","datalist","textarea"]
			},
			/* 
			scrollbar buttons
			*/
			scrollButtons:{ 
				/*
				enable scrollbar buttons
				values: boolean
					option						default
					-------------------------------------
					enable						null
				*/
				/*
				scrollbar buttons scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
				/*
				tabindex of the scrollbar buttons
				values: false, integer
					option						default
					-------------------------------------
					tabindex					null
				*/
			},
			/* 
			keyboard scrolling
			*/
			keyboard:{ 
				/*
				enable scrolling via keyboard
				values: boolean
				*/
				enable:true,
				/*
				keyboard scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
			},
			/*
			enable content touch-swipe scrolling 
			values: boolean, integer, string (number)
			integer values define the axis-specific minimum amount required for scrolling momentum
			*/
			contentTouchScroll:25,
			/*
			enable/disable document (default) touch-swipe scrolling 
			*/
			documentTouchScroll:true,
			/*
			advanced option parameters
			*/
			advanced:{
				/*
				auto-expand content horizontally (for "x" or "yx" axis) 
				values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)
					option						default
					-------------------------------------
					autoExpandHorizontalScroll	null
				*/
				/*
				auto-scroll to elements with focus
				*/
				autoScrollOnFocus:"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
				/*
				auto-update scrollbars on content, element or viewport resize 
				should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
				values: boolean
				*/
				updateOnContentResize:true,
				/*
				auto-update scrollbars each time each image inside the element is fully loaded 
				values: "auto", boolean
				*/
				updateOnImageLoad:"auto",
				/*
				auto-update scrollbars based on the amount and size changes of specific selectors 
				useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
				values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
				a value of true (boolean) will auto-update scrollbars each time any element is changed
					option						default
					-------------------------------------
					updateOnSelectorChange		null
				*/
				/*
				extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. "selector-1, selector-2")
					option						default
					-------------------------------------
					extraDraggableSelectors		null
				*/
				/*
				extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
					option						default
					-------------------------------------
					releaseDraggableSelectors	null
				*/
				/*
				auto-update timeout 
				values: integer (milliseconds)
				*/
				autoUpdateTimeout:60
			},
			/* 
			scrollbar theme 
			values: string (see CSS/plugin URI for a list of ready-to-use themes)
			*/
			theme:"light",
			/*
			user defined callback functions
			*/
			callbacks:{
				/*
				Available callbacks: 
					callback					default
					-------------------------------------
					onCreate					null
					onInit						null
					onScrollStart				null
					onScroll					null
					onTotalScroll				null
					onTotalScrollBack			null
					whileScrolling				null
					onOverflowY					null
					onOverflowX					null
					onOverflowYNone				null
					onOverflowXNone				null
					onImageLoad					null
					onSelectorChange			null
					onBeforeUpdate				null
					onUpdate					null
				*/
				onTotalScrollOffset:0,
				onTotalScrollBackOffset:0,
				alwaysTriggerOffsets:true
			}
			/*
			add scrollbar(s) on all elements matching the current selector, now and in the future 
			values: boolean, string 
			string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
			liveSelector values: string (selector)
				option						default
				-------------------------------------
				live						false
				liveSelector				null
			*/
		},
	
	
	
	
	
	/* 
	----------------------------------------
	VARS, CONSTANTS 
	----------------------------------------
	*/
	
		totalInstances=0, /* plugin instances amount */
		liveTimers={}, /* live option timers */
		oldIE=(window.attachEvent && !window.addEventListener) ? 1 : 0, /* detect IE < 9 */
		touchActive=false,touchable, /* global touch vars (for touch and pointer events) */
		/* general plugin classes */
		classes=[
			"mCSB_dragger_onDrag","mCSB_scrollTools_onDrag","mCS_img_loaded","mCS_disabled","mCS_destroyed","mCS_no_scrollbar",
			"mCS-autoHide","mCS-dir-rtl","mCS_no_scrollbar_y","mCS_no_scrollbar_x","mCS_y_hidden","mCS_x_hidden","mCSB_draggerContainer",
			"mCSB_buttonUp","mCSB_buttonDown","mCSB_buttonLeft","mCSB_buttonRight"
		],
		
	
	
	
	
	/* 
	----------------------------------------
	METHODS 
	----------------------------------------
	*/
	
		methods={
			
			/* 
			plugin initialization method 
			creates the scrollbar(s), plugin data object and options
			----------------------------------------
			*/
			
			init:function(options){
				
				var options=$.extend(true,{},defaults,options),
					selector=_selector.call(this); /* validate selector */
				
				/* 
				if live option is enabled, monitor for elements matching the current selector and 
				apply scrollbar(s) when found (now and in the future) 
				*/
				if(options.live){
					var liveSelector=options.liveSelector || this.selector || defaultSelector, /* live selector(s) */
						$liveSelector=$(liveSelector); /* live selector(s) as jquery object */
					if(options.live==="off"){
						/* 
						disable live if requested 
						usage: $(selector).mCustomScrollbar({live:"off"}); 
						*/
						removeLiveTimers(liveSelector);
						return;
					}
					liveTimers[liveSelector]=setTimeout(function(){
						/* call mCustomScrollbar fn on live selector(s) every half-second */
						$liveSelector.mCustomScrollbar(options);
						if(options.live==="once" && $liveSelector.length){
							/* disable live after first invocation */
							removeLiveTimers(liveSelector);
						}
					},500);
				}else{
					removeLiveTimers(liveSelector);
				}
				
				/* options backward compatibility (for versions < 3.0.0) and normalization */
				options.setWidth=(options.set_width) ? options.set_width : options.setWidth;
				options.setHeight=(options.set_height) ? options.set_height : options.setHeight;
				options.axis=(options.horizontalScroll) ? "x" : _findAxis(options.axis);
				options.scrollInertia=options.scrollInertia>0 && options.scrollInertia<17 ? 17 : options.scrollInertia;
				if(typeof options.mouseWheel!=="object" &&  options.mouseWheel==true){ /* old school mouseWheel option (non-object) */
					options.mouseWheel={enable:true,scrollAmount:"auto",axis:"y",preventDefault:false,deltaFactor:"auto",normalizeDelta:false,invert:false}
				}
				options.mouseWheel.scrollAmount=!options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
				options.mouseWheel.normalizeDelta=!options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
				options.scrollButtons.scrollType=_findScrollButtonsType(options.scrollButtons.scrollType); 
				
				_theme(options); /* theme-specific options */
				
				/* plugin constructor */
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if(!$this.data(pluginPfx)){ /* prevent multiple instantiations */
					
						/* store options and create objects in jquery data */
						$this.data(pluginPfx,{
							idx:++totalInstances, /* instance index */
							opt:options, /* options */
							scrollRatio:{y:null,x:null}, /* scrollbar to content ratio */
							overflowed:null, /* overflowed axis */
							contentReset:{y:null,x:null}, /* object to check when content resets */
							bindEvents:false, /* object to check if events are bound */
							tweenRunning:false, /* object to check if tween is running */
							sequential:{}, /* sequential scrolling object */
							langDir:$this.css("direction"), /* detect/store direction (ltr or rtl) */
							cbOffsets:null, /* object to check whether callback offsets always trigger */
							/* 
							object to check how scrolling events where last triggered 
							"internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
							usage: object.data("mCS").trigger
							*/
							trigger:null,
							/* 
							object to check for changes in elements in order to call the update method automatically 
							*/
							poll:{size:{o:0,n:0},img:{o:0,n:0},change:{o:0,n:0}}
						});
						
						var d=$this.data(pluginPfx),o=d.opt,
							/* HTML data attributes */
							htmlDataAxis=$this.data("mcs-axis"),htmlDataSbPos=$this.data("mcs-scrollbar-position"),htmlDataTheme=$this.data("mcs-theme");
						 
						if(htmlDataAxis){o.axis=htmlDataAxis;} /* usage example: data-mcs-axis="y" */
						if(htmlDataSbPos){o.scrollbarPosition=htmlDataSbPos;} /* usage example: data-mcs-scrollbar-position="outside" */
						if(htmlDataTheme){ /* usage example: data-mcs-theme="minimal" */
							o.theme=htmlDataTheme;
							_theme(o); /* theme-specific options */
						}
						
						_pluginMarkup.call(this); /* add plugin markup */
						
						if(d && o.callbacks.onCreate && typeof o.callbacks.onCreate==="function"){o.callbacks.onCreate.call(this);} /* callbacks: onCreate */
						
						$("#mCSB_"+d.idx+"_container img:not(."+classes[2]+")").addClass(classes[2]); /* flag loaded images */
						
						methods.update.call(null,$this); /* call the update method */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin update method 
			updates content and scrollbar(s) values, events and status 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("update");
			*/
			
			update:function(el,cb){
				
				var selector=el || _selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx),o=d.opt,
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							mCustomScrollBox=$("#mCSB_"+d.idx),
							mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
						
						if(!mCSB_container.length){return;}
						
						if(d.tweenRunning){_stop($this);} /* stop any running tweens while updating */
						
						if(cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate==="function"){o.callbacks.onBeforeUpdate.call(this);} /* callbacks: onBeforeUpdate */
						
						/* if element was disabled or destroyed, remove class(es) */
						if($this.hasClass(classes[3])){$this.removeClass(classes[3]);}
						if($this.hasClass(classes[4])){$this.removeClass(classes[4]);}
						
						/* css flexbox fix, detect/set max-height */
						mCustomScrollBox.css("max-height","none");
						if(mCustomScrollBox.height()!==$this.height()){mCustomScrollBox.css("max-height",$this.height());}
						
						_expandContentHorizontally.call(this); /* expand content horizontally */
						
						if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
							mCSB_container.css("width",_contentWidth(mCSB_container));
						}
						
						d.overflowed=_overflowed.call(this); /* determine if scrolling is required */
						
						_scrollbarVisibility.call(this); /* show/hide scrollbar(s) */
						
						/* auto-adjust scrollbar dragger length analogous to content */
						if(o.autoDraggerLength){_setDraggerLength.call(this);}
						
						_scrollRatio.call(this); /* calculate and store scrollbar to content ratio */
						
						_bindEvents.call(this); /* bind scrollbar events */
						
						/* reset scrolling position and/or events */
						var to=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)];
						if(o.axis!=="x"){ /* y/yx axis */
							if(!d.overflowed[0]){ /* y scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="y"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[1]){
									_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[0].height()>mCSB_dragger[0].parent().height()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* y scrolling is required */
								_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								d.contentReset.y=null;
							}
						}
						if(o.axis!=="y"){ /* x/yx axis */
							if(!d.overflowed[1]){ /* x scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="x"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[0]){
									_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[1].width()>mCSB_dragger[1].parent().width()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* x scrolling is required */
								_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								d.contentReset.x=null;
							}
						}
						
						/* callbacks: onImageLoad, onSelectorChange, onUpdate */
						if(cb && d){
							if(cb===2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad==="function"){
								o.callbacks.onImageLoad.call(this);
							}else if(cb===3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange==="function"){
								o.callbacks.onSelectorChange.call(this);
							}else if(o.callbacks.onUpdate && typeof o.callbacks.onUpdate==="function"){
								o.callbacks.onUpdate.call(this);
							}
						}
						
						_autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin scrollTo method 
			triggers a scrolling event to a specific value
			----------------------------------------
			usage: $(selector).mCustomScrollbar("scrollTo",value,options);
			*/
		
			scrollTo:function(val,options){
				
				/* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
				if(typeof val=="undefined" || val==null){return;}
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							/* method default options */
							methodDefaults={
								trigger:"external", /* method is by default triggered externally (e.g. from other scripts) */
								scrollInertia:o.scrollInertia, /* scrolling inertia (animation duration) */
								scrollEasing:"mcsEaseInOut", /* animation easing */
								moveDragger:false, /* move dragger instead of content */
								timeout:60, /* scroll-to delay */
								callbacks:true, /* enable/disable callbacks */
								onStart:true,
								onUpdate:true,
								onComplete:true
							},
							methodOptions=$.extend(true,{},methodDefaults,options),
							to=_arr.call(this,val),dur=methodOptions.scrollInertia>0 && methodOptions.scrollInertia<17 ? 17 : methodOptions.scrollInertia;
						
						/* translate yx values to actual scroll-to positions */
						to[0]=_to.call(this,to[0],"y");
						to[1]=_to.call(this,to[1],"x");
						
						/* 
						check if scroll-to value moves the dragger instead of content. 
						Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
						*/
						if(methodOptions.moveDragger){
							to[0]*=d.scrollRatio.y;
							to[1]*=d.scrollRatio.x;
						}
						
						methodOptions.dur=_isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden
						
						setTimeout(function(){ 
							/* do the scrolling */
							if(to[0]!==null && typeof to[0]!=="undefined" && o.axis!=="x" && d.overflowed[0]){ /* scroll y */
								methodOptions.dir="y";
								methodOptions.overwrite="all";
								_scrollTo($this,to[0].toString(),methodOptions);
							}
							if(to[1]!==null && typeof to[1]!=="undefined" && o.axis!=="y" && d.overflowed[1]){ /* scroll x */
								methodOptions.dir="x";
								methodOptions.overwrite="none";
								_scrollTo($this,to[1].toString(),methodOptions);
							}
						},methodOptions.timeout);
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin stop method 
			stops scrolling animation
			----------------------------------------
			usage: $(selector).mCustomScrollbar("stop");
			*/
			stop:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
										
						_stop($this);
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin disable method 
			temporarily disables the scrollbar(s) 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("disable",reset); 
			reset (boolean): resets content position to 0 
			*/
			disable:function(r){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx);
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						if(r){_resetContentPosition.call(this);} /* reset content position */
						
						_scrollbarVisibility.call(this,true); /* show/hide scrollbar(s) */
						
						$this.addClass(classes[3]); /* add disable class */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin destroy method 
			completely removes the scrollbar(s) and returns the element to its original state
			----------------------------------------
			usage: $(selector).mCustomScrollbar("destroy"); 
			*/
			destroy:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							mCustomScrollBox=$("#mCSB_"+d.idx),
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							scrollbar=$(".mCSB_"+d.idx+"_scrollbar");
					
						if(o.live){removeLiveTimers(o.liveSelector || $(selector).selector);} /* remove live timers */
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						_resetContentPosition.call(this); /* reset content position */
						
						$this.removeData(pluginPfx); /* remove plugin data object */
						
						_delete(this,"mcs"); /* delete callbacks object */
						
						/* remove plugin markup */
						scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
						mCSB_container.find("img."+classes[2]).removeClass(classes[2]); /* remove loaded images flag */
						mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
						/* remove plugin classes from the element and add destroy class */
						$this.removeClass(pluginNS+" _"+pluginPfx+"_"+d.idx+" "+classes[6]+" "+classes[7]+" "+classes[5]+" "+classes[3]).addClass(classes[4]);
					
					}
					
				});
				
			}
			/* ---------------------------------------- */
			
		},
	
	
	
	
		
	/* 
	----------------------------------------
	FUNCTIONS
	----------------------------------------
	*/
	
		/* validates selector (if selector is invalid or undefined uses the default one) */
		_selector=function(){
			return (typeof $(this)!=="object" || $(this).length<1) ? defaultSelector : this;
		},
		/* -------------------- */
		
		
		/* changes options according to theme */
		_theme=function(obj){
			var fixedSizeScrollbarThemes=["rounded","rounded-dark","rounded-dots","rounded-dots-dark"],
				nonExpandedScrollbarThemes=["rounded-dots","rounded-dots-dark","3d","3d-dark","3d-thick","3d-thick-dark","inset","inset-dark","inset-2","inset-2-dark","inset-3","inset-3-dark"],
				disabledScrollButtonsThemes=["minimal","minimal-dark"],
				enabledAutoHideScrollbarThemes=["minimal","minimal-dark"],
				scrollbarPositionOutsideThemes=["minimal","minimal-dark"];
			obj.autoDraggerLength=$.inArray(obj.theme,fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
			obj.autoExpandScrollbar=$.inArray(obj.theme,nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
			obj.scrollButtons.enable=$.inArray(obj.theme,disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
			obj.autoHideScrollbar=$.inArray(obj.theme,enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
			obj.scrollbarPosition=$.inArray(obj.theme,scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
		},
		/* -------------------- */
		
		
		/* live option timers removal */
		removeLiveTimers=function(selector){
			if(liveTimers[selector]){
				clearTimeout(liveTimers[selector]);
				_delete(liveTimers,selector);
			}
		},
		/* -------------------- */
		
		
		/* normalizes axis option to valid values: "y", "x", "yx" */
		_findAxis=function(val){
			return (val==="yx" || val==="xy" || val==="auto") ? "yx" : (val==="x" || val==="horizontal") ? "x" : "y";
		},
		/* -------------------- */
		
		
		/* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
		_findScrollButtonsType=function(val){
			return (val==="stepped" || val==="pixels" || val==="step" || val==="click") ? "stepped" : "stepless";
		},
		/* -------------------- */
		
		
		/* generates plugin markup */
		_pluginMarkup=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				expandClass=o.autoExpandScrollbar ? " "+classes[1]+"_expand" : "",
				scrollbar=["<div id='mCSB_"+d.idx+"_scrollbar_vertical' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_vertical"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>","<div id='mCSB_"+d.idx+"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_horizontal"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
				wrapperClass=o.axis==="yx" ? "mCSB_vertical_horizontal" : o.axis==="x" ? "mCSB_horizontal" : "mCSB_vertical",
				scrollbars=o.axis==="yx" ? scrollbar[0]+scrollbar[1] : o.axis==="x" ? scrollbar[1] : scrollbar[0],
				contentWrapper=o.axis==="yx" ? "<div id='mCSB_"+d.idx+"_container_wrapper' class='mCSB_container_wrapper' />" : "",
				autoHideClass=o.autoHideScrollbar ? " "+classes[6] : "",
				scrollbarDirClass=(o.axis!=="x" && d.langDir==="rtl") ? " "+classes[7] : "";
			if(o.setWidth){$this.css("width",o.setWidth);} /* set element width */
			if(o.setHeight){$this.css("height",o.setHeight);} /* set element height */
			o.setLeft=(o.axis!=="y" && d.langDir==="rtl") ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
			$this.addClass(pluginNS+" _"+pluginPfx+"_"+d.idx+autoHideClass+scrollbarDirClass).wrapInner("<div id='mCSB_"+d.idx+"' class='mCustomScrollBox mCS-"+o.theme+" "+wrapperClass+"'><div id='mCSB_"+d.idx+"_container' class='mCSB_container' style='position:relative; top:"+o.setTop+"; left:"+o.setLeft+";' dir='"+d.langDir+"' /></div>");
			var mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
				mCSB_container.css("width",_contentWidth(mCSB_container));
			}
			if(o.scrollbarPosition==="outside"){
				if($this.css("position")==="static"){ /* requires elements with non-static position */
					$this.css("position","relative");
				}
				$this.css("overflow","visible");
				mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
			}else{
				mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
				mCSB_container.wrap(contentWrapper);
			}
			_scrollButtons.call(this); /* add scrollbar buttons */
			/* minimum dragger length */
			var mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			mCSB_dragger[0].css("min-height",mCSB_dragger[0].height());
			mCSB_dragger[1].css("min-width",mCSB_dragger[1].width());
		},
		/* -------------------- */
		
		
		/* calculates content width */
		_contentWidth=function(el){
			var val=[el[0].scrollWidth,Math.max.apply(Math,el.children().map(function(){return $(this).outerWidth(true);}).get())],w=el.parent().width();
			return val[0]>w ? val[0] : val[1]>w ? val[1] : "100%";
		},
		/* -------------------- */
		
		
		/* expands content horizontally */
		_expandContentHorizontally=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.autoExpandHorizontalScroll && o.axis!=="y"){
				/* calculate scrollWidth */
				mCSB_container.css({"width":"auto","min-width":0,"overflow-x":"scroll"});
				var w=Math.ceil(mCSB_container[0].scrollWidth);
				if(o.advanced.autoExpandHorizontalScroll===3 || (o.advanced.autoExpandHorizontalScroll!==2 && w>mCSB_container.parent().width())){
					mCSB_container.css({"width":w,"min-width":"100%","overflow-x":"inherit"});
				}else{
					/* 
					wrap content with an infinite width div and set its position to absolute and width to auto. 
					Setting width to auto before calculating the actual width is important! 
					We must let the browser set the width as browser zoom values are impossible to calculate.
					*/
					mCSB_container.css({"overflow-x":"inherit","position":"absolute"})
						.wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />")
						.css({ /* set actual width, original position and un-wrap */
							/* 
							get the exact width (with decimals) and then round-up. 
							Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
							*/
							"width":(Math.ceil(mCSB_container[0].getBoundingClientRect().right+0.4)-Math.floor(mCSB_container[0].getBoundingClientRect().left)),
							"min-width":"100%",
							"position":"relative"
						}).unwrap();
				}
			}
		},
		/* -------------------- */
		
		
		/* adds scrollbar buttons */
		_scrollButtons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_scrollTools=$(".mCSB_"+d.idx+"_scrollbar:first"),
				tabindex=!_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='"+o.scrollButtons.tabindex+"'",
				btnHTML=[
					"<a href='#' class='"+classes[13]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[14]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[15]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[16]+"' "+tabindex+" />"
				],
				btn=[(o.axis==="x" ? btnHTML[2] : btnHTML[0]),(o.axis==="x" ? btnHTML[3] : btnHTML[1]),btnHTML[2],btnHTML[3]];
			if(o.scrollButtons.enable){
				mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
			}
		},
		/* -------------------- */
		
		
		/* auto-adjusts scrollbar dragger length */
		_setDraggerLength=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				ratio=[mCustomScrollBox.height()/mCSB_container.outerHeight(false),mCustomScrollBox.width()/mCSB_container.outerWidth(false)],
				l=[
					parseInt(mCSB_dragger[0].css("min-height")),Math.round(ratio[0]*mCSB_dragger[0].parent().height()),
					parseInt(mCSB_dragger[1].css("min-width")),Math.round(ratio[1]*mCSB_dragger[1].parent().width())
				],
				h=oldIE && (l[1]<l[0]) ? l[0] : l[1],w=oldIE && (l[3]<l[2]) ? l[2] : l[3];
			mCSB_dragger[0].css({
				"height":h,"max-height":(mCSB_dragger[0].parent().height()-10)
			}).find(".mCSB_dragger_bar").css({"line-height":l[0]+"px"});
			mCSB_dragger[1].css({
				"width":w,"max-width":(mCSB_dragger[1].parent().width()-10)
			});
		},
		/* -------------------- */
		
		
		/* calculates scrollbar to content ratio */
		_scrollRatio=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				scrollAmount=[mCSB_container.outerHeight(false)-mCustomScrollBox.height(),mCSB_container.outerWidth(false)-mCustomScrollBox.width()],
				ratio=[
					scrollAmount[0]/(mCSB_dragger[0].parent().height()-mCSB_dragger[0].height()),
					scrollAmount[1]/(mCSB_dragger[1].parent().width()-mCSB_dragger[1].width())
				];
			d.scrollRatio={y:ratio[0],x:ratio[1]};
		},
		/* -------------------- */
		
		
		/* toggles scrolling classes */
		_onDragClasses=function(el,action,xpnd){
			var expandClass=xpnd ? classes[0]+"_expanded" : "",
				scrollbar=el.closest(".mCSB_scrollTools");
			if(action==="active"){
				el.toggleClass(classes[0]+" "+expandClass); scrollbar.toggleClass(classes[1]); 
				el[0]._draggable=el[0]._draggable ? 0 : 1;
			}else{
				if(!el[0]._draggable){
					if(action==="hide"){
						el.removeClass(classes[0]); scrollbar.removeClass(classes[1]);
					}else{
						el.addClass(classes[0]); scrollbar.addClass(classes[1]);
					}
				}
			}
		},
		/* -------------------- */
		
		
		/* checks if content overflows its container to determine if scrolling is required */
		_overflowed=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				contentHeight=d.overflowed==null ? mCSB_container.height() : mCSB_container.outerHeight(false),
				contentWidth=d.overflowed==null ? mCSB_container.width() : mCSB_container.outerWidth(false),
				h=mCSB_container[0].scrollHeight,w=mCSB_container[0].scrollWidth;
			if(h>contentHeight){contentHeight=h;}
			if(w>contentWidth){contentWidth=w;}
			return [contentHeight>mCustomScrollBox.height(),contentWidth>mCustomScrollBox.width()];
		},
		/* -------------------- */
		
		
		/* resets content position to 0 */
		_resetContentPosition=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			_stop($this); /* stop any current scrolling before resetting */
			if((o.axis!=="x" && !d.overflowed[0]) || (o.axis==="y" && d.overflowed[0])){ /* reset y */
				mCSB_dragger[0].add(mCSB_container).css("top",0);
				_scrollTo($this,"_resetY");
			}
			if((o.axis!=="y" && !d.overflowed[1]) || (o.axis==="x" && d.overflowed[1])){ /* reset x */
				var cx=dx=0;
				if(d.langDir==="rtl"){ /* adjust left position for rtl direction */
					cx=mCustomScrollBox.width()-mCSB_container.outerWidth(false);
					dx=Math.abs(cx/d.scrollRatio.x);
				}
				mCSB_container.css("left",cx);
				mCSB_dragger[1].css("left",dx);
				_scrollTo($this,"_resetX");
			}
		},
		/* -------------------- */
		
		
		/* binds scrollbar events */
		_bindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt;
			if(!d.bindEvents){ /* check if events are already bound */
				_draggable.call(this);
				if(o.contentTouchScroll){_contentDraggable.call(this);}
				_selectable.call(this);
				if(o.mouseWheel.enable){ /* bind mousewheel fn when plugin is available */
					function _mwt(){
						mousewheelTimeout=setTimeout(function(){
							if(!$.event.special.mousewheel){
								_mwt();
							}else{
								clearTimeout(mousewheelTimeout);
								_mousewheel.call($this[0]);
							}
						},100);
					}
					var mousewheelTimeout;
					_mwt();
				}
				_draggerRail.call(this);
				_wrapperScroll.call(this);
				if(o.advanced.autoScrollOnFocus){_focus.call(this);}
				if(o.scrollButtons.enable){_buttons.call(this);}
				if(o.keyboard.enable){_keyboard.call(this);}
				d.bindEvents=true;
			}
		},
		/* -------------------- */
		
		
		/* unbinds scrollbar events */
		_unbindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				sb=".mCSB_"+d.idx+"_scrollbar",
				sel=$("#mCSB_"+d.idx+",#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,"+sb+" ."+classes[12]+",#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal,"+sb+">a"),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.releaseDraggableSelectors){sel.add($(o.advanced.releaseDraggableSelectors));}
			if(o.advanced.extraDraggableSelectors){sel.add($(o.advanced.extraDraggableSelectors));}
			if(d.bindEvents){ /* check if events are bound */
				/* unbind namespaced events from document/selectors */
				$(document).add($(!_canAccessIFrame() || top.document)).unbind("."+namespace);
				sel.each(function(){
					$(this).unbind("."+namespace);
				});
				/* clear and delete timeouts/objects */
				clearTimeout($this[0]._focusTimeout); _delete($this[0],"_focusTimeout");
				clearTimeout(d.sequential.step); _delete(d.sequential,"step");
				clearTimeout(mCSB_container[0].onCompleteTimeout); _delete(mCSB_container[0],"onCompleteTimeout");
				d.bindEvents=false;
			}
		},
		/* -------------------- */
		
		
		/* toggles scrollbar visibility */
		_scrollbarVisibility=function(disabled){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				contentWrapper=$("#mCSB_"+d.idx+"_container_wrapper"),
				content=contentWrapper.length ? contentWrapper : $("#mCSB_"+d.idx+"_container"),
				scrollbar=[$("#mCSB_"+d.idx+"_scrollbar_vertical"),$("#mCSB_"+d.idx+"_scrollbar_horizontal")],
				mCSB_dragger=[scrollbar[0].find(".mCSB_dragger"),scrollbar[1].find(".mCSB_dragger")];
			if(o.axis!=="x"){
				if(d.overflowed[0] && !disabled){
					scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display","block");
					content.removeClass(classes[8]+" "+classes[10]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[0].css("display","none");}
						content.removeClass(classes[10]);
					}else{
						scrollbar[0].css("display","none");
						content.addClass(classes[10]);
					}
					content.addClass(classes[8]);
				}
			}
			if(o.axis!=="y"){
				if(d.overflowed[1] && !disabled){
					scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display","block");
					content.removeClass(classes[9]+" "+classes[11]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[1].css("display","none");}
						content.removeClass(classes[11]);
					}else{
						scrollbar[1].css("display","none");
						content.addClass(classes[11]);
					}
					content.addClass(classes[9]);
				}
			}
			if(!d.overflowed[0] && !d.overflowed[1]){
				$this.addClass(classes[5]);
			}else{
				$this.removeClass(classes[5]);
			}
		},
		/* -------------------- */
		
		
		/* returns input coordinates of pointer, touch and mouse events (relative to document) */
		_coordinates=function(e){
			var t=e.type,o=e.target.ownerDocument!==document && frameElement!==null ? [$(frameElement).offset().top,$(frameElement).offset().left] : null,
				io=_canAccessIFrame() && e.target.ownerDocument!==top.document && frameElement!==null ? [$(e.view.frameElement).offset().top,$(e.view.frameElement).offset().left] : [0,0];
			switch(t){
				case "pointerdown": case "MSPointerDown": case "pointermove": case "MSPointerMove": case "pointerup": case "MSPointerUp":
					return o ? [e.originalEvent.pageY-o[0]+io[0],e.originalEvent.pageX-o[1]+io[1],false] : [e.originalEvent.pageY,e.originalEvent.pageX,false];
					break;
				case "touchstart": case "touchmove": case "touchend":
					var touch=e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
						touches=e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
					return e.target.ownerDocument!==document ? [touch.screenY,touch.screenX,touches>1] : [touch.pageY,touch.pageX,touches>1];
					break;
				default:
					return o ? [e.pageY-o[0]+io[0],e.pageX-o[1]+io[1],false] : [e.pageY,e.pageX,false];
			}
		},
		/* -------------------- */
		
		
		/* 
		SCROLLBAR DRAG EVENTS
		scrolls content via scrollbar dragging 
		*/
		_draggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				draggerId=["mCSB_"+d.idx+"_dragger_vertical","mCSB_"+d.idx+"_dragger_horizontal"],
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=$("#"+draggerId[0]+",#"+draggerId[1]),
				draggable,dragY,dragX,
				rds=o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
				eds=o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
			mCSB_dragger.bind("contextmenu."+namespace,function(e){
				e.preventDefault(); //prevent right click
			}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				touchActive=true;
				if(oldIE){document.onselectstart=function(){return false;}} /* disable text selection for IE < 9 */
				_iframe.call(mCSB_container,false); /* enable scrollbar dragging over iframes by disabling their events */
				_stop($this);
				draggable=$(this);
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
					h=draggable.height()+offset.top,w=draggable.width()+offset.left;
				if(y<h && y>0 && x<w && x>0){
					dragY=y; 
					dragX=x;
				}
				_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
			}).bind("touchmove."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				_drag(dragY,dragX,y,x);
			});
			$(document).add(eds).bind("mousemove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace,function(e){
				if(draggable){
					var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
					if(dragY===y && dragX===x){return;} /* has it really moved? */
					_drag(dragY,dragX,y,x);
				}
			}).add(rds).bind("mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				if(draggable){
					_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
					draggable=null;
				}
				touchActive=false;
				if(oldIE){document.onselectstart=null;} /* enable text selection for IE < 9 */
				_iframe.call(mCSB_container,true); /* enable iframes events */
			});
			function _drag(dragY,dragX,y,x){
				mCSB_container[0].idleTimer=o.scrollInertia<233 ? 250 : 0;
				if(draggable.attr("id")===draggerId[1]){
					var dir="x",to=((draggable[0].offsetLeft-dragX)+x)*d.scrollRatio.x;
				}else{
					var dir="y",to=((draggable[0].offsetTop-dragY)+y)*d.scrollRatio.y;
				}
				_scrollTo($this,to.toString(),{dir:dir,drag:true});
			}
		},
		/* -------------------- */
		
		
		/* 
		TOUCH SWIPE EVENTS
		scrolls content via touch swipe 
		Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
		*/
		_contentDraggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				draggable,dragY,dragX,touchStartY,touchStartX,touchMoveY=[],touchMoveX=[],startTime,runningTime,endTime,distance,speed,amount,
				durA=0,durB,overwrite=o.axis==="yx" ? "none" : "all",touchIntent=[],touchDrag,docDrag,
				iframe=mCSB_container.find("iframe"),
				events=[
					"touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace, //start
					"touchmove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace, //move
					"touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace //end
				],
				touchAction=document.body.style.touchAction!==undefined && document.body.style.touchAction!=="";
			mCSB_container.bind(events[0],function(e){
				_onTouchstart(e);
			}).bind(events[1],function(e){
				_onTouchmove(e);
			});
			mCustomScrollBox.bind(events[0],function(e){
				_onTouchstart2(e);
			}).bind(events[2],function(e){
				_onTouchend(e);
			});
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
								_onTouchstart(e);
								_onTouchstart2(e);
							}).bind(events[1],function(e){
								_onTouchmove(e);
							}).bind(events[2],function(e){
								_onTouchend(e);
							});
						}
					});
				});
			}
			function _onTouchstart(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
				touchable=1; touchDrag=0; docDrag=0; draggable=1;
				$this.removeClass("mCS_touch_action");
				var offset=mCSB_container.offset();
				dragY=_coordinates(e)[0]-offset.top;
				dragX=_coordinates(e)[1]-offset.left;
				touchIntent=[_coordinates(e)[0],_coordinates(e)[1]];
			}
			function _onTouchmove(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				if(!o.documentTouchScroll){e.preventDefault();} 
				e.stopImmediatePropagation();
				if(docDrag && !touchDrag){return;}
				if(draggable){
					runningTime=_getTime();
					var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
						easing="mcsLinearOut";
					touchMoveY.push(y);
					touchMoveX.push(x);
					touchIntent[2]=Math.abs(_coordinates(e)[0]-touchIntent[0]); touchIntent[3]=Math.abs(_coordinates(e)[1]-touchIntent[1]);
					if(d.overflowed[0]){
						var limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
							prevent=((dragY-y)>0 && (y-dragY)>-(limit*d.scrollRatio.y) && (touchIntent[3]*2<touchIntent[2] || o.axis==="yx"));
					}
					if(d.overflowed[1]){
						var limitX=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
							preventX=((dragX-x)>0 && (x-dragX)>-(limitX*d.scrollRatio.x) && (touchIntent[2]*2<touchIntent[3] || o.axis==="yx"));
					}
					if(prevent || preventX){ /* prevent native document scrolling */
						if(!touchAction){e.preventDefault();} 
						touchDrag=1;
					}else{
						docDrag=1;
						$this.addClass("mCS_touch_action");
					}
					if(touchAction){e.preventDefault();} 
					amount=o.axis==="yx" ? [(dragY-y),(dragX-x)] : o.axis==="x" ? [null,(dragX-x)] : [(dragY-y),null];
					mCSB_container[0].idleTimer=250;
					if(d.overflowed[0]){_drag(amount[0],durA,easing,"y","all",true);}
					if(d.overflowed[1]){_drag(amount[1],durA,easing,"x",overwrite,true);}
				}
			}
			function _onTouchstart2(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
				touchable=1;
				e.stopImmediatePropagation();
				_stop($this);
				startTime=_getTime();
				var offset=mCustomScrollBox.offset();
				touchStartY=_coordinates(e)[0]-offset.top;
				touchStartX=_coordinates(e)[1]-offset.left;
				touchMoveY=[]; touchMoveX=[];
			}
			function _onTouchend(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				draggable=0;
				e.stopImmediatePropagation();
				touchDrag=0; docDrag=0;
				endTime=_getTime();
				var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				if((endTime-runningTime)>30){return;}
				speed=1000/(endTime-startTime);
				var easing="mcsEaseOut",slow=speed<2.5,
					diff=slow ? [touchMoveY[touchMoveY.length-2],touchMoveX[touchMoveX.length-2]] : [0,0];
				distance=slow ? [(y-diff[0]),(x-diff[1])] : [y-touchStartY,x-touchStartX];
				var absDistance=[Math.abs(distance[0]),Math.abs(distance[1])];
				speed=slow ? [Math.abs(distance[0]/4),Math.abs(distance[1]/4)] : [speed,speed];
				var a=[
					Math.abs(mCSB_container[0].offsetTop)-(distance[0]*_m((absDistance[0]/speed[0]),speed[0])),
					Math.abs(mCSB_container[0].offsetLeft)-(distance[1]*_m((absDistance[1]/speed[1]),speed[1]))
				];
				amount=o.axis==="yx" ? [a[0],a[1]] : o.axis==="x" ? [null,a[1]] : [a[0],null];
				durB=[(absDistance[0]*4)+o.scrollInertia,(absDistance[1]*4)+o.scrollInertia];
				var md=parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
				amount[0]=absDistance[0]>md ? amount[0] : 0;
				amount[1]=absDistance[1]>md ? amount[1] : 0;
				if(d.overflowed[0]){_drag(amount[0],durB[0],easing,"y",overwrite,false);}
				if(d.overflowed[1]){_drag(amount[1],durB[1],easing,"x",overwrite,false);}
			}
			function _m(ds,s){
				var r=[s*1.5,s*2,s/1.5,s/2];
				if(ds>90){
					return s>4 ? r[0] : r[3];
				}else if(ds>60){
					return s>3 ? r[3] : r[2];
				}else if(ds>30){
					return s>8 ? r[1] : s>6 ? r[0] : s>4 ? s : r[2];
				}else{
					return s>8 ? s : r[3];
				}
			}
			function _drag(amount,dur,easing,dir,overwrite,drag){
				if(!amount){return;}
				_scrollTo($this,amount.toString(),{dur:dur,scrollEasing:easing,dir:dir,overwrite:overwrite,drag:drag});
			}
		},
		/* -------------------- */
		
		
		/* 
		SELECT TEXT EVENTS 
		scrolls content when text is selected 
		*/
		_selectable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				action;
			mCSB_container.bind("mousedown."+namespace,function(e){
				if(touchable){return;}
				if(!action){action=1; touchActive=true;}
			}).add(document).bind("mousemove."+namespace,function(e){
				if(!touchable && action && _sel()){
					var offset=mCSB_container.offset(),
						y=_coordinates(e)[0]-offset.top+mCSB_container[0].offsetTop,x=_coordinates(e)[1]-offset.left+mCSB_container[0].offsetLeft;
					if(y>0 && y<wrapper.height() && x>0 && x<wrapper.width()){
						if(seq.step){_seq("off",null,"stepped");}
					}else{
						if(o.axis!=="x" && d.overflowed[0]){
							if(y<0){
								_seq("on",38);
							}else if(y>wrapper.height()){
								_seq("on",40);
							}
						}
						if(o.axis!=="y" && d.overflowed[1]){
							if(x<0){
								_seq("on",37);
							}else if(x>wrapper.width()){
								_seq("on",39);
							}
						}
					}
				}
			}).bind("mouseup."+namespace+" dragend."+namespace,function(e){
				if(touchable){return;}
				if(action){action=0; _seq("off",null);}
				touchActive=false;
			});
			function _sel(){
				return 	window.getSelection ? window.getSelection().toString() : 
						document.selection && document.selection.type!="Control" ? document.selection.createRange().text : 0;
			}
			function _seq(a,c,s){
				seq.type=s && action ? "stepped" : "stepless";
				seq.scrollAmount=10;
				_sequentialScroll($this,a,c,"mcsLinearOut",s ? 60 : null);
			}
		},
		/* -------------------- */
		
		
		/* 
		MOUSE WHEEL EVENT
		scrolls content via mouse-wheel 
		via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
		*/
		_mousewheel=function(){
			if(!$(this).data(pluginPfx)){return;} /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				iframe=$("#mCSB_"+d.idx+"_container").find("iframe");
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind("mousewheel."+namespace,function(e,delta){
								_onMousewheel(e,delta);
							});
						}
					});
				});
			}
			mCustomScrollBox.bind("mousewheel."+namespace,function(e,delta){
				_onMousewheel(e,delta);
			});
			function _onMousewheel(e,delta){
				_stop($this);
				if(_disableMousewheel($this,e.target)){return;} /* disables mouse-wheel when hovering specific elements */
				var deltaFactor=o.mouseWheel.deltaFactor!=="auto" ? parseInt(o.mouseWheel.deltaFactor) : (oldIE && e.deltaFactor<100) ? 100 : e.deltaFactor || 100,
					dur=o.scrollInertia;
				if(o.axis==="x" || o.mouseWheel.axis==="x"){
					var dir="x",
						px=[Math.round(deltaFactor*d.scrollRatio.x),parseInt(o.mouseWheel.scrollAmount)],
						amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.width() ? mCustomScrollBox.width()*0.9 : px[0],
						contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetLeft),
						draggerPos=mCSB_dragger[1][0].offsetLeft,
						limit=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
						dlt=o.mouseWheel.axis==="y" ? (e.deltaY || delta) : e.deltaX;
				}else{
					var dir="y",
						px=[Math.round(deltaFactor*d.scrollRatio.y),parseInt(o.mouseWheel.scrollAmount)],
						amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.height() ? mCustomScrollBox.height()*0.9 : px[0],
						contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetTop),
						draggerPos=mCSB_dragger[0][0].offsetTop,
						limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
						dlt=e.deltaY || delta;
				}
				if((dir==="y" && !d.overflowed[0]) || (dir==="x" && !d.overflowed[1])){return;}
				if(o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice){dlt=-dlt;}
				if(o.mouseWheel.normalizeDelta){dlt=dlt<0 ? -1 : 1;}
				if((dlt>0 && draggerPos!==0) || (dlt<0 && draggerPos!==limit) || o.mouseWheel.preventDefault){
					e.stopImmediatePropagation();
					e.preventDefault();
				}
				if(e.deltaFactor<5 && !o.mouseWheel.normalizeDelta){
					//very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly
					amount=e.deltaFactor; dur=17;
				}
				_scrollTo($this,(contentPos-(dlt*amount)).toString(),{dir:dir,dur:dur});
			}
		},
		/* -------------------- */
		
		
		/* checks if iframe can be accessed */
		_canAccessIFrameCache=new Object(),
		_canAccessIFrame=function(iframe){
		    var result=false,cacheKey=false,html=null;
		    if(iframe===undefined){
				cacheKey="#empty";
		    }else if($(iframe).attr("id")!==undefined){
				cacheKey=$(iframe).attr("id");
		    }
			if(cacheKey!==false && _canAccessIFrameCache[cacheKey]!==undefined){
				return _canAccessIFrameCache[cacheKey];
			}
			if(!iframe){
				try{
					var doc=top.document;
					html=doc.body.innerHTML;
				}catch(err){/* do nothing */}
				result=(html!==null);
			}else{
				try{
					var doc=iframe.contentDocument || iframe.contentWindow.document;
					html=doc.body.innerHTML;
				}catch(err){/* do nothing */}
				result=(html!==null);
			}
			if(cacheKey!==false){_canAccessIFrameCache[cacheKey]=result;}
			return result;
		},
		/* -------------------- */
		
		
		/* switches iframe's pointer-events property (drag, mousewheel etc. over cross-domain iframes) */
		_iframe=function(evt){
			var el=this.find("iframe");
			if(!el.length){return;} /* check if content contains iframes */
			var val=!evt ? "none" : "auto";
			el.css("pointer-events",val); /* for IE11, iframe's display property should not be "block" */
		},
		/* -------------------- */
		
		
		/* disables mouse-wheel when hovering specific elements like select, datalist etc. */
		_disableMousewheel=function(el,target){
			var tag=target.nodeName.toLowerCase(),
				tags=el.data(pluginPfx).opt.mouseWheel.disableOver,
				/* elements that require focus */
				focusTags=["select","textarea"];
			return $.inArray(tag,tags) > -1 && !($.inArray(tag,focusTags) > -1 && !$(target).is(":focus"));
		},
		/* -------------------- */
		
		
		/* 
		DRAGGER RAIL CLICK EVENT
		scrolls content via dragger rail 
		*/
		_draggerRail=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				mCSB_draggerContainer=$(".mCSB_"+d.idx+"_scrollbar ."+classes[12]),
				clickable;
			mCSB_draggerContainer.bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				touchActive=true;
				if(!$(e.target).hasClass("mCSB_dragger")){clickable=1;}
			}).bind("touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				touchActive=false;
			}).bind("click."+namespace,function(e){
				if(!clickable){return;}
				clickable=0;
				if($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")){
					_stop($this);
					var el=$(this),mCSB_dragger=el.find(".mCSB_dragger");
					if(el.parent(".mCSB_scrollTools_horizontal").length>0){
						if(!d.overflowed[1]){return;}
						var dir="x",
							clickDir=e.pageX>mCSB_dragger.offset().left ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetLeft)-(clickDir*(wrapper.width()*0.9));
					}else{
						if(!d.overflowed[0]){return;}
						var dir="y",
							clickDir=e.pageY>mCSB_dragger.offset().top ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetTop)-(clickDir*(wrapper.height()*0.9));
					}
					_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		FOCUS EVENT
		scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
		*/
		_focus=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent();
			mCSB_container.bind("focusin."+namespace,function(e){
				var el=$(document.activeElement),
					nested=mCSB_container.find(".mCustomScrollBox").length,
					dur=0;
				if(!el.is(o.advanced.autoScrollOnFocus)){return;}
				_stop($this);
				clearTimeout($this[0]._focusTimeout);
				$this[0]._focusTimer=nested ? (dur+17)*nested : 0;
				$this[0]._focusTimeout=setTimeout(function(){
					var	to=[_childPos(el)[0],_childPos(el)[1]],
						contentPos=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft],
						isVisible=[
							(contentPos[0]+to[0]>=0 && contentPos[0]+to[0]<wrapper.height()-el.outerHeight(false)),
							(contentPos[1]+to[1]>=0 && contentPos[0]+to[1]<wrapper.width()-el.outerWidth(false))
						],
						overwrite=(o.axis==="yx" && !isVisible[0] && !isVisible[1]) ? "none" : "all";
					if(o.axis!=="x" && !isVisible[0]){
						_scrollTo($this,to[0].toString(),{dir:"y",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
					if(o.axis!=="y" && !isVisible[1]){
						_scrollTo($this,to[1].toString(),{dir:"x",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
				},$this[0]._focusTimer);
			});
		},
		/* -------------------- */
		
		
		/* sets content wrapper scrollTop/scrollLeft always to 0 */
		_wrapperScroll=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				wrapper=$("#mCSB_"+d.idx+"_container").parent();
			wrapper.bind("scroll."+namespace,function(e){
				if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){
					$(".mCSB_"+d.idx+"_scrollbar").css("visibility","hidden"); /* hide scrollbar(s) */
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		BUTTONS EVENTS
		scrolls content via up, down, left and right buttons 
		*/
		_buttons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				sel=".mCSB_"+d.idx+"_scrollbar",
				btn=$(sel+">a");
			btn.bind("contextmenu."+namespace,function(e){
				e.preventDefault(); //prevent right click
			}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace+" mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace+" mouseout."+namespace+" pointerout."+namespace+" MSPointerOut."+namespace+" click."+namespace,function(e){
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				var btnClass=$(this).attr("class");
				seq.type=o.scrollButtons.scrollType;
				switch(e.type){
					case "mousedown": case "touchstart": case "pointerdown": case "MSPointerDown":
						if(seq.type==="stepped"){return;}
						touchActive=true;
						d.tweenRunning=false;
						_seq("on",btnClass);
						break;
					case "mouseup": case "touchend": case "pointerup": case "MSPointerUp":
					case "mouseout": case "pointerout": case "MSPointerOut":
						if(seq.type==="stepped"){return;}
						touchActive=false;
						if(seq.dir){_seq("off",btnClass);}
						break;
					case "click":
						if(seq.type!=="stepped" || d.tweenRunning){return;}
						_seq("on",btnClass);
						break;
				}
				function _seq(a,c){
					seq.scrollAmount=o.scrollButtons.scrollAmount;
					_sequentialScroll($this,a,c);
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		KEYBOARD EVENTS
		scrolls content via keyboard 
		Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
		*/
		_keyboard=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				editables="input,textarea,select,datalist,keygen,[contenteditable='true']",
				iframe=mCSB_container.find("iframe"),
				events=["blur."+namespace+" keydown."+namespace+" keyup."+namespace];
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
								_onKeyboard(e);
							});
						}
					});
				});
			}
			mCustomScrollBox.attr("tabindex","0").bind(events[0],function(e){
				_onKeyboard(e);
			});
			function _onKeyboard(e){
				switch(e.type){
					case "blur":
						if(d.tweenRunning && seq.dir){_seq("off",null);}
						break;
					case "keydown": case "keyup":
						var code=e.keyCode ? e.keyCode : e.which,action="on";
						if((o.axis!=="x" && (code===38 || code===40)) || (o.axis!=="y" && (code===37 || code===39))){
							/* up (38), down (40), left (37), right (39) arrows */
							if(((code===38 || code===40) && !d.overflowed[0]) || ((code===37 || code===39) && !d.overflowed[1])){return;}
							if(e.type==="keyup"){action="off";}
							if(!$(document.activeElement).is(editables)){
								e.preventDefault();
								e.stopImmediatePropagation();
								_seq(action,code);
							}
						}else if(code===33 || code===34){
							/* PgUp (33), PgDn (34) */
							if(d.overflowed[0] || d.overflowed[1]){
								e.preventDefault();
								e.stopImmediatePropagation();
							}
							if(e.type==="keyup"){
								_stop($this);
								var keyboardDir=code===34 ? -1 : 1;
								if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
									var dir="x",to=Math.abs(mCSB_container[0].offsetLeft)-(keyboardDir*(wrapper.width()*0.9));
								}else{
									var dir="y",to=Math.abs(mCSB_container[0].offsetTop)-(keyboardDir*(wrapper.height()*0.9));
								}
								_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
							}
						}else if(code===35 || code===36){
							/* End (35), Home (36) */
							if(!$(document.activeElement).is(editables)){
								if(d.overflowed[0] || d.overflowed[1]){
									e.preventDefault();
									e.stopImmediatePropagation();
								}
								if(e.type==="keyup"){
									if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
										var dir="x",to=code===35 ? Math.abs(wrapper.width()-mCSB_container.outerWidth(false)) : 0;
									}else{
										var dir="y",to=code===35 ? Math.abs(wrapper.height()-mCSB_container.outerHeight(false)) : 0;
									}
									_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
								}
							}
						}
						break;
				}
				function _seq(a,c){
					seq.type=o.keyboard.scrollType;
					seq.scrollAmount=o.keyboard.scrollAmount;
					if(seq.type==="stepped" && d.tweenRunning){return;}
					_sequentialScroll($this,a,c);
				}
			}
		},
		/* -------------------- */
		
		
		/* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
		_sequentialScroll=function(el,action,trigger,e,s){
			var d=el.data(pluginPfx),o=d.opt,seq=d.sequential,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				once=seq.type==="stepped" ? true : false,
				steplessSpeed=o.scrollInertia < 26 ? 26 : o.scrollInertia, /* 26/1.5=17 */
				steppedSpeed=o.scrollInertia < 1 ? 17 : o.scrollInertia;
			switch(action){
				case "on":
					seq.dir=[
						(trigger===classes[16] || trigger===classes[15] || trigger===39 || trigger===37 ? "x" : "y"),
						(trigger===classes[13] || trigger===classes[15] || trigger===38 || trigger===37 ? -1 : 1)
					];
					_stop(el);
					if(_isNumeric(trigger) && seq.type==="stepped"){return;}
					_on(once);
					break;
				case "off":
					_off();
					if(once || (d.tweenRunning && seq.dir)){
						_on(true);
					}
					break;
			}
			
			/* starts sequence */
			function _on(once){
				if(o.snapAmount){seq.scrollAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0]==="x" ? o.snapAmount[1] : o.snapAmount[0];} /* scrolling snapping */
				var c=seq.type!=="stepped", /* continuous scrolling */
					t=s ? s : !once ? 1000/60 : c ? steplessSpeed/1.5 : steppedSpeed, /* timer */
					m=!once ? 2.5 : c ? 7.5 : 40, /* multiplier */
					contentPos=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)],
					ratio=[d.scrollRatio.y>10 ? 10 : d.scrollRatio.y,d.scrollRatio.x>10 ? 10 : d.scrollRatio.x],
					amount=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*(ratio[1]*m)) : contentPos[0]+(seq.dir[1]*(ratio[0]*m)),
					px=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*parseInt(seq.scrollAmount)) : contentPos[0]+(seq.dir[1]*parseInt(seq.scrollAmount)),
					to=seq.scrollAmount!=="auto" ? px : amount,
					easing=e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
					onComplete=!once ? false : true;
				if(once && t<17){
					to=seq.dir[0]==="x" ? contentPos[1] : contentPos[0];
				}
				_scrollTo(el,to.toString(),{dir:seq.dir[0],scrollEasing:easing,dur:t,onComplete:onComplete});
				if(once){
					seq.dir=false;
					return;
				}
				clearTimeout(seq.step);
				seq.step=setTimeout(function(){
					_on();
				},t);
			}
			/* stops sequence */
			function _off(){
				clearTimeout(seq.step);
				_delete(seq,"step");
				_stop(el);
			}
		},
		/* -------------------- */
		
		
		/* returns a yx array from value */
		_arr=function(val){
			var o=$(this).data(pluginPfx).opt,vals=[];
			if(typeof val==="function"){val=val();} /* check if the value is a single anonymous function */
			/* check if value is object or array, its length and create an array with yx values */
			if(!(val instanceof Array)){ /* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
				vals[0]=val.y ? val.y : val.x || o.axis==="x" ? null : val;
				vals[1]=val.x ? val.x : val.y || o.axis==="y" ? null : val;
			}else{ /* array value (e.g. [100,100]) */
				vals=val.length>1 ? [val[0],val[1]] : o.axis==="x" ? [null,val[0]] : [val[0],null];
			}
			/* check if array values are anonymous functions */
			if(typeof vals[0]==="function"){vals[0]=vals[0]();}
			if(typeof vals[1]==="function"){vals[1]=vals[1]();}
			return vals;
		},
		/* -------------------- */
		
		
		/* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
		_to=function(val,dir){
			if(val==null || typeof val=="undefined"){return;}
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				t=typeof val;
			if(!dir){dir=o.axis==="x" ? "x" : "y";}
			var contentLength=dir==="x" ? mCSB_container.outerWidth(false)-wrapper.width() : mCSB_container.outerHeight(false)-wrapper.height(),
				contentPos=dir==="x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
				cssProp=dir==="x" ? "left" : "top";
			switch(t){
				case "function": /* this currently is not used. Consider removing it */
					return val();
					break;
				case "object": /* js/jquery object */
					var obj=val.jquery ? val : $(val);
					if(!obj.length){return;}
					return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
					break;
				case "string": case "number":
					if(_isNumeric(val)){ /* numeric value */
						return Math.abs(val);
					}else if(val.indexOf("%")!==-1){ /* percentage value */
						return Math.abs(contentLength*parseInt(val)/100);
					}else if(val.indexOf("-=")!==-1){ /* decrease value */
						return Math.abs(contentPos-parseInt(val.split("-=")[1]));
					}else if(val.indexOf("+=")!==-1){ /* inrease value */
						var p=(contentPos+parseInt(val.split("+=")[1]));
						return p>=0 ? 0 : Math.abs(p);
					}else if(val.indexOf("px")!==-1 && _isNumeric(val.split("px")[0])){ /* pixels string value (e.g. "100px") */
						return Math.abs(val.split("px")[0]);
					}else{
						if(val==="top" || val==="left"){ /* special strings */
							return 0;
						}else if(val==="bottom"){
							return Math.abs(wrapper.height()-mCSB_container.outerHeight(false));
						}else if(val==="right"){
							return Math.abs(wrapper.width()-mCSB_container.outerWidth(false));
						}else if(val==="first" || val==="last"){
							var obj=mCSB_container.find(":"+val);
							return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
						}else{
							if($(val).length){ /* jquery selector */
								return dir==="x" ? _childPos($(val))[1] : _childPos($(val))[0];
							}else{ /* other values (e.g. "100em") */
								mCSB_container.css(cssProp,val);
								methods.update.call(null,$this[0]);
								return;
							}
						}
					}
					break;
			}
		},
		/* -------------------- */
		
		
		/* calls the update method automatically */
		_autoUpdate=function(rem){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(rem){
				/* 
				removes autoUpdate timer 
				usage: _autoUpdate.call(this,"remove");
				*/
				clearTimeout(mCSB_container[0].autoUpdate);
				_delete(mCSB_container[0],"autoUpdate");
				return;
			}
			upd();
			function upd(){
				clearTimeout(mCSB_container[0].autoUpdate);
				if($this.parents("html").length===0){
					/* check element in dom tree */
					$this=null;
					return;
				}
				mCSB_container[0].autoUpdate=setTimeout(function(){
					/* update on specific selector(s) length and size change */
					if(o.advanced.updateOnSelectorChange){
						d.poll.change.n=sizesSum();
						if(d.poll.change.n!==d.poll.change.o){
							d.poll.change.o=d.poll.change.n;
							doUpd(3);
							return;
						}
					}
					/* update on main element and scrollbar size changes */
					if(o.advanced.updateOnContentResize){
						d.poll.size.n=$this[0].scrollHeight+$this[0].scrollWidth+mCSB_container[0].offsetHeight+$this[0].offsetHeight+$this[0].offsetWidth;
						if(d.poll.size.n!==d.poll.size.o){
							d.poll.size.o=d.poll.size.n;
							doUpd(1);
							return;
						}
					}
					/* update on image load */
					if(o.advanced.updateOnImageLoad){
						if(!(o.advanced.updateOnImageLoad==="auto" && o.axis==="y")){ //by default, it doesn't run on vertical content
							d.poll.img.n=mCSB_container.find("img").length;
							if(d.poll.img.n!==d.poll.img.o){
								d.poll.img.o=d.poll.img.n;
								mCSB_container.find("img").each(function(){
									imgLoader(this);
								});
								return;
							}
						}
					}
					if(o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad){upd();}
				},o.advanced.autoUpdateTimeout);
			}
			/* a tiny image loader */
			function imgLoader(el){
				if($(el).hasClass(classes[2])){doUpd(); return;}
				var img=new Image();
				function createDelegate(contextObject,delegateMethod){
					return function(){return delegateMethod.apply(contextObject,arguments);}
				}
				function imgOnLoad(){
					this.onload=null;
					$(el).addClass(classes[2]);
					doUpd(2);
				}
				img.onload=createDelegate(img,imgOnLoad);
				img.src=el.src;
			}
			/* returns the total height and width sum of all elements matching the selector */
			function sizesSum(){
				if(o.advanced.updateOnSelectorChange===true){o.advanced.updateOnSelectorChange="*";}
				var total=0,sel=mCSB_container.find(o.advanced.updateOnSelectorChange);
				if(o.advanced.updateOnSelectorChange && sel.length>0){sel.each(function(){total+=this.offsetHeight+this.offsetWidth;});}
				return total;
			}
			/* calls the update method */
			function doUpd(cb){
				clearTimeout(mCSB_container[0].autoUpdate);
				methods.update.call(null,$this[0],cb);
			}
		},
		/* -------------------- */
		
		
		/* snaps scrolling to a multiple of a pixels number */
		_snapAmount=function(to,amount,offset){
			return (Math.round(to/amount)*amount-offset); 
		},
		/* -------------------- */
		
		
		/* stops content and scrollbar animations */
		_stop=function(el){
			var d=el.data(pluginPfx),
				sel=$("#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal");
			sel.each(function(){
				_stopTween.call(this);
			});
		},
		/* -------------------- */
		
		
		/* 
		ANIMATES CONTENT 
		This is where the actual scrolling happens
		*/
		_scrollTo=function(el,to,options){
			var d=el.data(pluginPfx),o=d.opt,
				defaults={
					trigger:"internal",
					dir:"y",
					scrollEasing:"mcsEaseOut",
					drag:false,
					dur:o.scrollInertia,
					overwrite:"all",
					callbacks:true,
					onStart:true,
					onUpdate:true,
					onComplete:true
				},
				options=$.extend(defaults,options),
				dur=[options.dur,(options.drag ? 0 : options.dur)],
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				totalScrollOffsets=o.callbacks.onTotalScrollOffset ? _arr.call(el,o.callbacks.onTotalScrollOffset) : [0,0],
				totalScrollBackOffsets=o.callbacks.onTotalScrollBackOffset ? _arr.call(el,o.callbacks.onTotalScrollBackOffset) : [0,0];
			d.trigger=options.trigger;
			if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){ /* always reset scrollTop/Left */
				$(".mCSB_"+d.idx+"_scrollbar").css("visibility","visible");
				wrapper.scrollTop(0).scrollLeft(0);
			}
			if(to==="_resetY" && !d.contentReset.y){
				/* callbacks: onOverflowYNone */
				if(_cb("onOverflowYNone")){o.callbacks.onOverflowYNone.call(el[0]);}
				d.contentReset.y=1;
			}
			if(to==="_resetX" && !d.contentReset.x){
				/* callbacks: onOverflowXNone */
				if(_cb("onOverflowXNone")){o.callbacks.onOverflowXNone.call(el[0]);}
				d.contentReset.x=1;
			}
			if(to==="_resetY" || to==="_resetX"){return;}
			if((d.contentReset.y || !el[0].mcs) && d.overflowed[0]){
				/* callbacks: onOverflowY */
				if(_cb("onOverflowY")){o.callbacks.onOverflowY.call(el[0]);}
				d.contentReset.x=null;
			}
			if((d.contentReset.x || !el[0].mcs) && d.overflowed[1]){
				/* callbacks: onOverflowX */
				if(_cb("onOverflowX")){o.callbacks.onOverflowX.call(el[0]);}
				d.contentReset.x=null;
			}
			if(o.snapAmount){ /* scrolling snapping */
				var snapAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : options.dir==="x" ? o.snapAmount[1] : o.snapAmount[0];
				to=_snapAmount(to,snapAmount,o.snapOffset);
			}
			switch(options.dir){
				case "x":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_horizontal"),
						property="left",
						contentPos=mCSB_container[0].offsetLeft,
						limit=[
							mCustomScrollBox.width()-mCSB_container.outerWidth(false),
							mCSB_dragger.parent().width()-mCSB_dragger.width()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.x)],
						tso=totalScrollOffsets[1],
						tsbo=totalScrollBackOffsets[1],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.x : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.x : 0;
					break;
				case "y":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_vertical"),
						property="top",
						contentPos=mCSB_container[0].offsetTop,
						limit=[
							mCustomScrollBox.height()-mCSB_container.outerHeight(false),
							mCSB_dragger.parent().height()-mCSB_dragger.height()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.y)],
						tso=totalScrollOffsets[0],
						tsbo=totalScrollBackOffsets[0],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.y : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.y : 0;
					break;
			}
			if(scrollTo[1]<0 || (scrollTo[0]===0 && scrollTo[1]===0)){
				scrollTo=[0,0];
			}else if(scrollTo[1]>=limit[1]){
				scrollTo=[limit[0],limit[1]];
			}else{
				scrollTo[0]=-scrollTo[0];
			}
			if(!el[0].mcs){
				_mcs();  /* init mcs object (once) to make it available before callbacks */
				if(_cb("onInit")){o.callbacks.onInit.call(el[0]);} /* callbacks: onInit */
			}
			clearTimeout(mCSB_container[0].onCompleteTimeout);
			_tweenTo(mCSB_dragger[0],property,Math.round(scrollTo[1]),dur[1],options.scrollEasing);
			if(!d.tweenRunning && ((contentPos===0 && scrollTo[0]>=0) || (contentPos===limit[0] && scrollTo[0]<=limit[0]))){return;}
			_tweenTo(mCSB_container[0],property,Math.round(scrollTo[0]),dur[0],options.scrollEasing,options.overwrite,{
				onStart:function(){
					if(options.callbacks && options.onStart && !d.tweenRunning){
						/* callbacks: onScrollStart */
						if(_cb("onScrollStart")){_mcs(); o.callbacks.onScrollStart.call(el[0]);}
						d.tweenRunning=true;
						_onDragClasses(mCSB_dragger);
						d.cbOffsets=_cbOffsets();
					}
				},onUpdate:function(){
					if(options.callbacks && options.onUpdate){
						/* callbacks: whileScrolling */
						if(_cb("whileScrolling")){_mcs(); o.callbacks.whileScrolling.call(el[0]);}
					}
				},onComplete:function(){
					if(options.callbacks && options.onComplete){
						if(o.axis==="yx"){clearTimeout(mCSB_container[0].onCompleteTimeout);}
						var t=mCSB_container[0].idleTimer || 0;
						mCSB_container[0].onCompleteTimeout=setTimeout(function(){
							/* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
							if(_cb("onScroll")){_mcs(); o.callbacks.onScroll.call(el[0]);}
							if(_cb("onTotalScroll") && scrollTo[1]>=limit[1]-totalScrollOffset && d.cbOffsets[0]){_mcs(); o.callbacks.onTotalScroll.call(el[0]);}
							if(_cb("onTotalScrollBack") && scrollTo[1]<=totalScrollBackOffset && d.cbOffsets[1]){_mcs(); o.callbacks.onTotalScrollBack.call(el[0]);}
							d.tweenRunning=false;
							mCSB_container[0].idleTimer=0;
							_onDragClasses(mCSB_dragger,"hide");
						},t);
					}
				}
			});
			/* checks if callback function exists */
			function _cb(cb){
				return d && o.callbacks[cb] && typeof o.callbacks[cb]==="function";
			}
			/* checks whether callback offsets always trigger */
			function _cbOffsets(){
				return [o.callbacks.alwaysTriggerOffsets || contentPos>=limit[0]+tso,o.callbacks.alwaysTriggerOffsets || contentPos<=-tsbo];
			}
			/* 
			populates object with useful values for the user 
			values: 
				content: this.mcs.content
				content top position: this.mcs.top 
				content left position: this.mcs.left 
				dragger top position: this.mcs.draggerTop 
				dragger left position: this.mcs.draggerLeft 
				scrolling y percentage: this.mcs.topPct 
				scrolling x percentage: this.mcs.leftPct 
				scrolling direction: this.mcs.direction
			*/
			function _mcs(){
				var cp=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft], /* content position */
					dp=[mCSB_dragger[0].offsetTop,mCSB_dragger[0].offsetLeft], /* dragger position */
					cl=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false)], /* content length */
					pl=[mCustomScrollBox.height(),mCustomScrollBox.width()]; /* content parent length */
				el[0].mcs={
					content:mCSB_container, /* original content wrapper as jquery object */
					top:cp[0],left:cp[1],draggerTop:dp[0],draggerLeft:dp[1],
					topPct:Math.round((100*Math.abs(cp[0]))/(Math.abs(cl[0])-pl[0])),leftPct:Math.round((100*Math.abs(cp[1]))/(Math.abs(cl[1])-pl[1])),
					direction:options.dir
				};
				/* 
				this refers to the original element containing the scrollbar(s)
				usage: this.mcs.top, this.mcs.leftPct etc. 
				*/
			}
		},
		/* -------------------- */
		
		
		/* 
		CUSTOM JAVASCRIPT ANIMATION TWEEN 
		Lighter and faster than jquery animate() and css transitions 
		Animates top/left properties and includes easings 
		*/
		_tweenTo=function(el,prop,to,duration,easing,overwrite,callbacks){
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var callbacks=callbacks || {},
				onStart=callbacks.onStart || function(){},onUpdate=callbacks.onUpdate || function(){},onComplete=callbacks.onComplete || function(){},
				startTime=_getTime(),_delay,progress=0,from=el.offsetTop,elStyle=el.style,_request,tobj=el._mTween[prop];
			if(prop==="left"){from=el.offsetLeft;}
			var diff=to-from;
			tobj.stop=0;
			if(overwrite!=="none"){_cancelTween();}
			_startTween();
			function _step(){
				if(tobj.stop){return;}
				if(!progress){onStart.call();}
				progress=_getTime()-startTime;
				_tween();
				if(progress>=tobj.time){
					tobj.time=(progress>tobj.time) ? progress+_delay-(progress-tobj.time) : progress+_delay-1;
					if(tobj.time<progress+1){tobj.time=progress+1;}
				}
				if(tobj.time<duration){tobj.id=_request(_step);}else{onComplete.call();}
			}
			function _tween(){
				if(duration>0){
					tobj.currVal=_ease(tobj.time,from,diff,duration,easing);
					elStyle[prop]=Math.round(tobj.currVal)+"px";
				}else{
					elStyle[prop]=to+"px";
				}
				onUpdate.call();
			}
			function _startTween(){
				_delay=1000/60;
				tobj.time=progress+_delay;
				_request=(!window.requestAnimationFrame) ? function(f){_tween(); return setTimeout(f,0.01);} : window.requestAnimationFrame;
				tobj.id=_request(_step);
			}
			function _cancelTween(){
				if(tobj.id==null){return;}
				if(!window.requestAnimationFrame){clearTimeout(tobj.id);
				}else{window.cancelAnimationFrame(tobj.id);}
				tobj.id=null;
			}
			function _ease(t,b,c,d,type){
				switch(type){
					case "linear": case "mcsLinear":
						return c*t/d + b;
						break;
					case "mcsLinearOut":
						t/=d; t--; return c * Math.sqrt(1 - t*t) + b;
						break;
					case "easeInOutSmooth":
						t/=d/2;
						if(t<1) return c/2*t*t + b;
						t--;
						return -c/2 * (t*(t-2) - 1) + b;
						break;
					case "easeInOutStrong":
						t/=d/2;
						if(t<1) return c/2 * Math.pow( 2, 10 * (t - 1) ) + b;
						t--;
						return c/2 * ( -Math.pow( 2, -10 * t) + 2 ) + b;
						break;
					case "easeInOut": case "mcsEaseInOut":
						t/=d/2;
						if(t<1) return c/2*t*t*t + b;
						t-=2;
						return c/2*(t*t*t + 2) + b;
						break;
					case "easeOutSmooth":
						t/=d; t--;
						return -c * (t*t*t*t - 1) + b;
						break;
					case "easeOutStrong":
						return c * ( -Math.pow( 2, -10 * t/d ) + 1 ) + b;
						break;
					case "easeOut": case "mcsEaseOut": default:
						var ts=(t/=d)*t,tc=ts*t;
						return b+c*(0.499999999999997*tc*ts + -2.5*ts*ts + 5.5*tc + -6.5*ts + 4*t);
				}
			}
		},
		/* -------------------- */
		
		
		/* returns current time */
		_getTime=function(){
			if(window.performance && window.performance.now){
				return window.performance.now();
			}else{
				if(window.performance && window.performance.webkitNow){
					return window.performance.webkitNow();
				}else{
					if(Date.now){return Date.now();}else{return new Date().getTime();}
				}
			}
		},
		/* -------------------- */
		
		
		/* stops a tween */
		_stopTween=function(){
			var el=this;
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var props=["top","left"];
			for(var i=0; i<props.length; i++){
				var prop=props[i];
				if(el._mTween[prop].id){
					if(!window.requestAnimationFrame){clearTimeout(el._mTween[prop].id);
					}else{window.cancelAnimationFrame(el._mTween[prop].id);}
					el._mTween[prop].id=null;
					el._mTween[prop].stop=1;
				}
			}
		},
		/* -------------------- */
		
		
		/* deletes a property (avoiding the exception thrown by IE) */
		_delete=function(c,m){
			try{delete c[m];}catch(e){c[m]=null;}
		},
		/* -------------------- */
		
		
		/* detects left mouse button */
		_mouseBtnLeft=function(e){
			return !(e.which && e.which!==1);
		},
		/* -------------------- */
		
		
		/* detects if pointer type event is touch */
		_pointerTouch=function(e){
			var t=e.originalEvent.pointerType;
			return !(t && t!=="touch" && t!==2);
		},
		/* -------------------- */
		
		
		/* checks if value is numeric */
		_isNumeric=function(val){
			return !isNaN(parseFloat(val)) && isFinite(val);
		},
		/* -------------------- */
		
		
		/* returns element position according to content */
		_childPos=function(el){
			var p=el.parents(".mCSB_container");
			return [el.offset().top-p.offset().top,el.offset().left-p.offset().left];
		},
		/* -------------------- */
		
		
		/* checks if browser tab is hidden/inactive via Page Visibility API */
		_isTabHidden=function(){
			var prop=_getHiddenProp();
			if(!prop) return false;
			return document[prop];
			function _getHiddenProp(){
				var pfx=["webkit","moz","ms","o"];
				if("hidden" in document) return "hidden"; //natively supported
				for(var i=0; i<pfx.length; i++){ //prefixed
				    if((pfx[i]+"Hidden") in document) 
				        return pfx[i]+"Hidden";
				}
				return null; //not supported
			}
		};
		/* -------------------- */
		
	
	
	
	
	/* 
	----------------------------------------
	PLUGIN SETUP 
	----------------------------------------
	*/
	
	/* plugin constructor functions */
	$.fn[pluginNS]=function(method){ /* usage: $(selector).mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	$[pluginNS]=function(method){ /* usage: $.mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	
	/* 
	allow setting plugin default options. 
	usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
	to apply any changed default options on default selectors (below), use inside document ready fn 
	e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
	*/
	$[pluginNS].defaults=defaults;
	
	/* 
	add window object (window.mCustomScrollbar) 
	usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
	*/
	window[pluginNS]=true;
	
	$(window).bind("load",function(){
		
		$(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */
		
		/* extend jQuery expressions */
		$.extend($.expr[":"],{
			/* checks if element is within scrollable viewport */
			mcsInView:$.expr[":"].mcsInView || function(el){
				var $el=$(el),content=$el.parents(".mCSB_container"),wrapper,cPos;
				if(!content.length){return;}
				wrapper=content.parent();
				cPos=[content[0].offsetTop,content[0].offsetLeft];
				return 	cPos[0]+_childPos($el)[0]>=0 && cPos[0]+_childPos($el)[0]<wrapper.height()-$el.outerHeight(false) && 
						cPos[1]+_childPos($el)[1]>=0 && cPos[1]+_childPos($el)[1]<wrapper.width()-$el.outerWidth(false);
			},
			/* checks if element or part of element is in view of scrollable viewport */
			mcsInSight:$.expr[":"].mcsInSight || function(el,i,m){
				var $el=$(el),elD,content=$el.parents(".mCSB_container"),wrapperView,pos,wrapperViewPct,
					pctVals=m[3]==="exact" ? [[1,0],[1,0]] : [[0.9,0.1],[0.6,0.4]];
				if(!content.length){return;}
				elD=[$el.outerHeight(false),$el.outerWidth(false)];
				pos=[content[0].offsetTop+_childPos($el)[0],content[0].offsetLeft+_childPos($el)[1]];
				wrapperView=[content.parent()[0].offsetHeight,content.parent()[0].offsetWidth];
				wrapperViewPct=[elD[0]<wrapperView[0] ? pctVals[0] : pctVals[1],elD[1]<wrapperView[1] ? pctVals[0] : pctVals[1]];
				return 	pos[0]-(wrapperView[0]*wrapperViewPct[0][0])<0 && pos[0]+elD[0]-(wrapperView[0]*wrapperViewPct[0][1])>=0 && 
						pos[1]-(wrapperView[1]*wrapperViewPct[1][0])<0 && pos[1]+elD[1]-(wrapperView[1]*wrapperViewPct[1][1])>=0;
			},
			/* checks if element is overflowed having visible scrollbar(s) */
			mcsOverflow:$.expr[":"].mcsOverflow || function(el){
				var d=$(el).data(pluginPfx);
				if(!d){return;}
				return d.overflowed[0] || d.overflowed[1];
			}
		});
	
	});

}))}));
"use strict";function toggleFullScreen(){$(window).height();document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement?document.cancelFullScreen?document.cancelFullScreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen():document.documentElement.requestFullscreen?document.documentElement.requestFullscreen():document.documentElement.mozRequestFullScreen?document.documentElement.mozRequestFullScreen():document.documentElement.webkitRequestFullscreen&&document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT),$(".full-screen").toggleClass("icon-maximize"),$(".full-screen").toggleClass("icon-minimize")}$(document).ready(function(){var e=($(window),$("body")),t=e[0].className;$(".main-menu").attr("id",t),$(".card-header-right .close-card").on("click",function(){var e=$(this);e.parents(".card").animate({opacity:"0","-webkit-transform":"scale3d(.3, .3, .3)",transform:"scale3d(.3, .3, .3)"}),setTimeout(function(){e.parents(".card").remove()},800)}),$(".card-header-right .minimize-card").on("click",function(){var e=$(this),t=$(e.parents(".card"));$(t).children(".card-block").slideToggle();$(this).toggleClass("icon-minus").fadeIn("slow"),$(this).toggleClass("icon-plus").fadeIn("slow")}),$(".card-header-right .full-card").on("click",function(){var e=$(this);$(e.parents(".card")).toggleClass("full-card"),$(this).toggleClass("icon-maximize"),$(this).toggleClass("icon-minimize")}),$("#more-details").on("click",function(){$(".more-details").slideToggle(500)}),$(".mobile-options").on("click",function(){$(".navbar-container .nav-right").slideToggle("slow")}),$.mCustomScrollbar.defaults.axis="yx",$("#styleSelector .style-cont").slimScroll({setTop:"10px",height:"calc(100vh - 440px)"}),$(".main-menu").mCustomScrollbar({setTop:"10px",setHeight:"calc(100% - 80px)"});var a=$(window).height()-80;$(".main-friend-list").slimScroll({height:a,allowPageScroll:!1,wheelStep:5,color:"#1b8bf9"}),$("#search-friends").on("keyup",function(){var e=$(this).val().toLowerCase();$(".userlist-box .media-body .chat-header").each(function(){var t=$(this).text().toLowerCase();$(this).closest(".userlist-box")[-1!==t.indexOf(e)?"show":"hide"]()})}),$(".displayChatbox").on("click",function(){if("right"==$(".pcoded").attr("vertical-placement"))var e={direction:"left"};else var e={direction:"right"};$(".showChat").toggle("slide",e,500)}),$(".userlist-box").on("click",function(){if("right"==$(".pcoded").attr("vertical-placement"))var e={direction:"left"};else var e={direction:"right"};$(".showChat_inner").toggle("slide",e,500)}),$(".back_chatBox").on("click",function(){if("right"==$(".pcoded").attr("vertical-placement"))var e={direction:"left"};else var e={direction:"right"};$(".showChat_inner").toggle("slide",e,500),$(".showChat").css("display","block")}),$(".search-btn").on("click",function(){$(".main-search").addClass("open"),$(".main-search .form-control").animate({width:"200px"})}),$(".search-close").on("click",function(){$(".main-search .form-control").animate({width:"0"}),setTimeout(function(){$(".main-search").removeClass("open")},300)}),$("#mobile-collapse i").addClass("icon-toggle-right"),$("#mobile-collapse").on("click",function(){$("#mobile-collapse i").toggleClass("icon-toggle-right"),$("#mobile-collapse i").toggleClass("icon-toggle-left")})}),$(document).ready(function(){$(function(){$('[data-toggle="tooltip"]').tooltip()}),$(".theme-loader").fadeOut("slow",function(){$(this).remove()})}),$("#styleSelector").append('<div class="selector-toggle"><a href="javascript:void(0)"></a></div><ul><li><p class="selector-title main-title st-main-title"><b>Adminty </b>Customizer</p><span class="text-muted">Live customizer with tons of options</span></li><li><p class="selector-title">Main layouts</p></li><li><div class="theme-color"><a href="#" class="navbar-theme" navbar-theme="themelight1"><span class="head"></span><span class="cont"></span></a><a href="#" class="navbar-theme" navbar-theme="theme1"><span class="head"></span><span class="cont"></span></a></div></li></ul><div class="style-cont m-t-10"><ul class="nav nav-tabs  tabs" role="tablist"><li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#sel-layout" role="tab">Layouts</a></li><li class="nav-item"><a class="nav-link" data-toggle="tab" href="#sel-sidebar-setting" role="tab">Sidebar Settings</a></li></ul><div class="tab-content tabs"><div class="tab-pane active" id="sel-layout" role="tabpanel"><ul><li class="theme-option"><div class="checkbox-fade fade-in-primary"><label><input type="checkbox" value="false" id="sidebar-position" name="sidebar-position" checked><span class="cr"><i class="cr-icon feather icon-check txt-success f-w-600"></i></span><span>Fixed Sidebar Position</span></label></div></li><li class="theme-option"><div class="checkbox-fade fade-in-primary"><label><input type="checkbox" value="false" id="header-position" name="header-position" checked><span class="cr"><i class="cr-icon feather icon-check txt-success f-w-600"></i></span><span>Fixed Header Position</span></label></div></li></ul></div><div class="tab-pane" id="sel-sidebar-setting" role="tabpanel"><ul><li class="theme-option"><p class="sub-title drp-title">Menu Type</p><div class="form-radio" id="menu-effect"><div class="radio radio-inverse radio-inline" data-toggle="tooltip" title="simple icon"><label><input type="radio" name="radio" value="st6" onclick="handlemenutype(this.value)" checked="true"><i class="helper"></i><span class="micon st6"><i class="feather icon-command"></i></span></label></div><div class="radio  radio-primary radio-inline" data-toggle="tooltip" title="color icon"><label><input type="radio" name="radio" value="st5" onclick="handlemenutype(this.value)"><i class="helper"></i><span class="micon st5"><i class="feather icon-command"></i></span></label></div></div></li><li class="theme-option"><p class="sub-title drp-title">SideBar Effect</p><select id="vertical-menu-effect" class="form-control minimal"><option name="vertical-menu-effect" value="shrink">shrink</option><option name="vertical-menu-effect" value="overlay">overlay</option><option name="vertical-menu-effect" value="push">Push</option></select></li><li class="theme-option"><p class="sub-title drp-title">Hide/Show Border</p><select id="vertical-border-style" class="form-control minimal"><option name="vertical-border-style" value="solid">Style 1</option><option name="vertical-border-style" value="dotted">Style 2</option><option name="vertical-border-style" value="dashed">Style 3</option><option name="vertical-border-style" value="none">No Border</option></select></li><li class="theme-option"><p class="sub-title drp-title">Drop-Down Icon</p><select id="vertical-dropdown-icon" class="form-control minimal"><option name="vertical-dropdown-icon" value="style1">Style 1</option><option name="vertical-dropdown-icon" value="style2">style 2</option><option name="vertical-dropdown-icon" value="style3">style 3</option></select></li><li class="theme-option"><p class="sub-title drp-title">Sub Menu Drop-down Icon</p><select id="vertical-subitem-icon" class="form-control minimal"><option name="vertical-subitem-icon" value="style1">Style 1</option><option name="vertical-subitem-icon" value="style2">style 2</option><option name="vertical-subitem-icon" value="style3">style 3</option><option name="vertical-subitem-icon" value="style4">style 4</option><option name="vertical-subitem-icon" value="style5">style 5</option><option name="vertical-subitem-icon" value="style6">style 6</option></select></li></ul></div><ul><li><p class="selector-title">Header Brand color</p></li><li class="theme-option"><div class="theme-color"><a href="#" class="logo-theme" logo-theme="theme1"><span class="head"></span><span class="cont"></span></a><a href="#" class="logo-theme" logo-theme="theme2"><span class="head"></span><span class="cont"></span></a><a href="#" class="logo-theme" logo-theme="theme3"><span class="head"></span><span class="cont"></span></a><a href="#" class="logo-theme" logo-theme="theme4"><span class="head"></span><span class="cont"></span></a><a href="#" class="logo-theme" logo-theme="theme5"><span class="head"></span><span class="cont"></span></a></div></li><li><p class="selector-title">Header color</p></li><li class="theme-option"><div class="theme-color"><a href="#" class="header-theme" header-theme="theme1"><span class="head"></span><span class="cont"></span></a><a href="#" class="header-theme" header-theme="theme2"><span class="head"></span><span class="cont"></span></a><a href="#" class="header-theme" header-theme="theme3"><span class="head"></span><span class="cont"></span></a><a href="#" class="header-theme" header-theme="theme4"><span class="head"></span><span class="cont"></span></a><a href="#" class="header-theme" header-theme="theme5"><span class="head"></span><span class="cont"></span></a><a href="#" class="header-theme" header-theme="theme6"><span class="head"></span><span class="cont"></span></a></div></li><li><p class="selector-title">Active link color</p></li><li class="theme-option"><div class="theme-color"><a href="#" class="active-item-theme small" active-item-theme="theme1">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme2">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme3">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme4">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme5">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme6">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme7">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme8">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme9">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme10">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme11">&nbsp;</a><a href="#" class="active-item-theme small" active-item-theme="theme12">&nbsp;</a></div></li><li><p class="selector-title">Menu Caption Color</p></li><li class="theme-option"><div class="theme-color"><a href="#" class="leftheader-theme small" lheader-theme="theme1">&nbsp;</a><a href="#" class="leftheader-theme small" lheader-theme="theme2">&nbsp;</a><a href="#" class="leftheader-theme small" lheader-theme="theme3">&nbsp;</a><a href="#" class="leftheader-theme small" lheader-theme="theme4">&nbsp;</a><a href="#" class="leftheader-theme small" lheader-theme="theme5">&nbsp;</a><a href="#" class="leftheader-theme small" lheader-theme="theme6">&nbsp;</a></div></li></ul></div></div><ul><li><a href="http://html.codedthemes.com/Adminty/doc" target="_blank" class="btn btn-primary btn-block m-r-15 m-t-5 m-b-10">Online Documentation</a></li><li class="text-center"><span class="text-center f-18 m-t-15 m-b-15 d-block">Thank you for sharing !</span><a href="#!" target="_blank" class="btn btn-facebook soc-icon m-b-20"><i class="feather icon-facebook"></i></a><a href="#!" target="_blank" class="btn btn-twitter soc-icon m-l-20 m-b-20"><i class="feather icon-twitter"></i></a></li></ul>');

(function (window) {
    'use strict';
    var config;
    var isDirty = false;
    window.Common = (function () {
        var swalShow = function (a, b, c) {
            Swal.fire({
                icon: a,
                title: b,
                text: c,
            });
        }

        var swalDelete = function (url, recid) {
            Swal.fire({
                title: "Confirm Delete",
                text: "Are you sure you want to delete this record?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                allowOutsideClick: false,
                showLoaderOnConfirm: false
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: url,
                        data: { id: recid },
                        beforeSend: function () { blocker() },
                        complete: function () { $.unblockUI() },
                        success: function (data) {
                            if (data.success === true) {
                                window.location.href = data.url;
                            }
                            eval(data.message);
                        }
                    });
                }
            });
        };

        var swalDeleteLine = function (url, recid, form) {
            Swal.fire({
                title: "Confirm Delete",
                text: "Are you sure you want to delete line?",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                allowOutsideClick: false,
                showLoaderOnConfirm: true,
                preConfirm: () => {

                }
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: $(form).serialize() + '&lineId=' + recid,
                        beforeSend: function () { blocker() },
                        complete: function () { $.unblockUI() },
                        success: function (data) {
                            if (data.success) {
                                reloadLine(data.dto, data.url);
                            }
                            eval(data.message);
                        }
                    });
                }
            });
        };

        var swalConfirmSubmit = function (form, msg, linkaction, close) {
            Swal.fire({
                title: "Confirm",
                text: msg,
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                allowOutsideClick: false,
                showLoaderOnConfirm: false
            }).then((result) => {
                if (result.value) {
                    submitModal(form, linkaction, close);
                }
            });
        };

        var swalConfirmAction = function (form, msg, url, report, close, approval) {
            Swal.fire({
                title: "Confirm",
                text: msg,
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                allowOutsideClick: false,
                showLoaderOnConfirm: false
            }).then((result) => {
                if (result.value) {
                    var targetMod = $(form).closest(".modal");
                    var redirectWindow;
                    blocker();
                    if (report === 'True') {
                        redirectWindow = window.open('', '_blank');
                    }
                    $.ajax({
                        url: url,
                        type: 'GET',
                        complete: function () { $.unblockUI() },
                        success: function (data) {
                            if (data.success) {
                                if (report === 'True' && data.reportUrl !== '') {
                                    redirectWindow.location.href = data.reportUrl;
                                }
                                if (approval === true) {
                                    window.setTimeout(function () {
                                        location.reload();
                                    }, 2000);
                                   
                                }
                                if (close === 'True') {
                                    targetMod.toggle();
                                } else {
                                    reloadModal(form, data.url)
                                }
                            } else if (report === 'True') {
                                redirectWindow.close();
                            }
                            eval(data.message);
                        }
                    });
                }
            });
        };

        var toastrShow = function (a, b) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-center",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            toastr[a](b);
        }

        var blockerLink = function () {
            $.ajaxSetup({ cache: false });

            $('*[data-load]').click(function () {
                blocker();
            });

            $('*[data-submit]').click(function () {
                var form = $(this).parents('form:first');
                $.validator.unobtrusive.parse(form);
                if (form.valid()) {
                    blocker();
                } else {
                    toastr['error']('Ensure all fields are filled correctly.');
                    $.unblockUI();
                }
            });
        }

        var blocker = function () {
            $.blockUI({
                message: '<div class="theme-loader"><div class="ball-scale"><div class= "contain">'
                    + '<div class="ring"><div class="frame"></div></div> '
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '<div class="ring"><div class="frame"></div></div>'
                    + '</div></div></div>',
                css: { backgroundColor: 'transparent', height: '50px', border: '0', cursor: 'default' },
                overlayCSS: { cursor: 'default' },
                baseZ: 2000
            });
        }

        var displayModal = function (url) {
            var dialog = $('<div class="modal fade modalIndex" role="dialog"><div class="modal-dialog modal-lg" role="document"><div class="modal-content"></div></div></div>');
            $(dialog).appendTo('#modal-holder');
            $(dialog).on('hidden.bs.modal', function (e) {
                $(this).fadeOut().remove();
            });

            var divTarget = dialog.children(".modal-dialog").first().children(".modal-content").first();
            divTarget.html('');
            divTarget.load(url, function () {
                dialog.modal({
                    keyboard: false,
                    backdrop: 'static'
                })
                var form = dialog.find('form').first();
                if (form.data("error") !== 'none') { eval(form.data("error")); }
                ("")
                //Controls.activate(siteOptions);    
                $.unblockUI();
            });
        }

        var submitModal = function (form, linkAction, close) {
            $.validator.unobtrusive.parse(form);
            if (form.valid()) {
                var targetMod = $(form).closest(".modal");
                var options = {
                    type: 'POST',
                    cache: false,
                    dataType: 'json',
                    data: { linkAction: linkAction },
                    success: function (data) {
                        if (data.success) {
                            isDirty = false;
                            if (close) {
                                targetMod.modal('toggle');
                                $.unblockUI();
                            } else {

                                reloadModal(form, data.url, data.message);
                            }
                        } else {
                            isDirty = false;
                            $.unblockUI();
                            eval(data.message);
                        }
                    },
                    beforeSubmit: function (formData, jqForm, options) {

                        Common.blocker();
                        $.unblockUI();
                    },
                    error: function (e, r, a) {
                        Common.swalShow('error', 'Error Occurred! Unknown Error. Please contact your administrator', 'Alert');
                        $.unblockUI();
                    }
                };

                form.ajaxSubmit(options);
                return false;
            } else {
                Common.toastrShow('error', 'Ensure all fields are filled correctly.')
                $.unblockUI();
                return false;
            }
            $.unblockUI();
        }

        var submitReport = function (form) {
            var redirectWindow;
            var targetMod = $(form).closest(".modal");
            redirectWindow = window.open('', '_blank');
            var options = {
                type: 'POST',
                cache: false,
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        redirectWindow.location.href = data.reportUrl;
                    } else {
                        redirectWindow.close();
                        eval(data.message);
                    }
                    $.unblockUI();
                },
                beforeSubmit: function (formData, jqForm, options) {
                    Common.blocker();
                },
                error: function (e, r, a) {
                    redirectWindow.close();
                    Common.swalShow('error', 'Error Occurred! Unknown Error. Please contact your administrator', 'Alert');
                    $.unblockUI();
                }
            };

            form.ajaxSubmit(options);
            return false;
        }

        var reloadModal = function (form, url, msg) {
            var targetDiv = $(form).closest(".modal-content");
            var targetMod = $(form).closest(".modal");
            targetMod.removeData();
            targetDiv.load(url, function () {
                //Controls.activate(siteOptions);
                $.unblockUI();
                if (msg !== null && msg !== "") {
                    eval(msg);
                }
                $.unblockUI();
            })
        }

        var reloadLine = function (formdata, url) {
            $.ajax({
                async: true,
                data: formdata,
                type: "POST",
                url: url,
                success: function (partialView) {
                    $('#divtbline').html(partialView);
                    //Controls.activate(config);
                }
            });
            $.unblockUI();
        }

        var runReport = function (url) {
            var redirectWindow;
            redirectWindow = window.open('', '_blank');
            $.ajax({
                url: url,
                type: 'GET',
                complete: function () { $.unblockUI() },
                success: function (data) {
                    if (data.success) {
                        redirectWindow.location.href = data.reportUrl;
                    } else {
                        redirectWindow.close();
                        eval(data.message);
                    }
                    $.unblockUI();
                }
            });
        }


        return {
            swalShow: swalShow,
            swalDelete: swalDelete,
            swalDeleteLine: swalDeleteLine,
            swalConfirmSubmit: swalConfirmSubmit,
            swalConfirmAction: swalConfirmAction,
            toastrShow: toastrShow,
            blockerLink: blockerLink,
            blocker: blocker,
            displayModal: displayModal,
            submitModal: submitModal,
            submitReport: submitReport,
            reloadModal: reloadModal,
            reloadLine: reloadLine,
            runReport: runReport
        };
    })();

    window.Controls = (function () {

        var activate = function (options) {
            config = options;
            Common.blockerLink();
            bootTable();
            dateTime();
            dataselect();
            cardToggle();
            modalEvents();
            inputPicker();
            inputMask();
            selectTable();
            multiLine();
            multiselect();
            attachDropzone();
        }

        var bootTable = function () {
            var $btable = $('.refresh-index, .modal-index');
            $btable.bootstrapTable({
                classes: 'table table-sm table-hover',
                theadClasses: 'thead-light',
                toggle: 'table',
                sortable: true,
                silentSort: false,
                //serverSort: false,
                search: true,
                visibleSearch: true,
                pagination: true,
                pageList: '[5,10, 25, 50, 100, 200, All]',
                pageSize: '10',
                //sidePagination: 'server',
                showExtendedPagination: true,
                //totalNotFilteredField: 'TotalNotFiltered',
                singleSelect: true,
                //clickToSelect: true,
                loadingFontSize: '14px',
                //queryParams: function (p) {
                //    return queryParams(p);
                //}
            });

            function queryParams(params) {

                var cols = $btable.bootstrapTable('getVisibleColumns').map(function (e) {
                    return e
                });

                var searchcol = '';
                for (var c of cols) {
                    if (!c.checkbox && c.searchable/* && ((this.options.visibleSearch && column.visible) || !this.options.visibleSearch)*/) {
                        searchcol = searchcol + c.field + ',';
                    }
                }
                params.searchable = searchcol;
                return {
                    request: JSON.stringify(params)
                }
            }
        }
        var dateTime = function () {
            $('[data-ctrl="jquerydate"]').datepicker({
                showOn: "button",
                dateFormat: 'dd mmm yyyy',
                buttonText: "<i class='fa icon-calendar'></i>"
            });

            $('[data-ctrl="datepicker"]').datetimepicker({
                format: 'DD MMM YYYY',
                widgetParent: config.parentControl,
                toolbarPlacement: 'bottom',
                showToday: true,
                showClear: true,
                showClose: true
            });
        }

        var dataselect = function () {
            $('[data-ctrl="select2"]').select2({
                dropdownParent: config.parentControl,
                theme: 'bootstrap4',
                allowClear: true
            });

            var firstEmptySelect = true;
            var hdr = "";

            var ajaxdef = {
                ajax: {
                    dataType: 'json',
                    delay: 500,
                    data: function (params) {
                        return {
                            search: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        hdr = data.header;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 20) < data.count
                            }
                        };
                    },
                    cache: true
                },
                templateResult: formatResult,
                templateSelection: formatSelect,
                theme: 'bootstrap4',
                allowClear: true
            };

            $('[data-ctrl="ajaxcascade"],[data-ctrl="ajaxselect"]').select2(ajaxdef);

            $('[data-ctrl="ajaxcascade"],[data-ctrl="ajaxselect"],[data-ctrl="select2"]').on("change", function (e) {
                var ctrlName = this.name;
                if ($('[data-target-ctrl ="' + ctrlName + '"]').length) {
                    var val = $(this).val();
                    var options = ajaxdef;
                    $('[data-target-ctrl ="' + ctrlName + '"]').each(function () {
                        var targeturl = $(this).data("target-url");
                        var $ctrl = $(this);
                        $ctrl.val('').trigger('change');
                        $.get(targeturl, { value: val }, function (data) {
                            var ajaxopt = $.extend(true, ajaxdef.ajax, { url: data.url });
                            options = $.extend({}, ajaxdef, { ajax: ajaxopt });
                            $ctrl.select2('destroy');
                            $ctrl.removeAttr("data-ajax--url");
                            $ctrl.select2(options);
                            if (data.readstatus) {
                                $ctrl.attr("readonly", "readonly");
                            } else {
                                $ctrl.removeAttr("readonly");
                            }
                        });
                    });
                }
            });

            function formatResult(result) {

                var $container = "";
                if (result.loading) {
                    firstEmptySelect = true;
                    return result.text;
                }
                if (firstEmptySelect) {
                    firstEmptySelect = false;
                    $container = $(hdr + result.display);
                    return $container;
                }

                $container = $(result.display);
                return $container;
            }

            function formatSelect(repo) {
                return repo.text;
            }
        }

        var cardToggle = function () {
            $(".card-header-right .minimize-card").on('click', function (e) {
                e.stopImmediatePropagation();
                var $this = $(this);
                var port = $($this.parents('.card'));
                $(port).children('.card-block').slideToggle();
                $(this).toggleClass("icon-minus").fadeIn('slow');
                $(this).toggleClass("icon-plus").fadeIn('slow');
            });
            $(".card-header-right .full-card").on('click', function () {
                var $this = $(this);
                var port = $($this.parents('.card'));
                port.toggleClass("full-card");
                $(this).toggleClass("icon-maximize");
                $(this).toggleClass("icon-minimize");
            });
        }

        var selectTable = function () {
            $('[data-ctrl="selecttable"]').selecttable();
        }

        var multiLine = function () {
            $('[data-ctrl="multiline"]').summernote({
                toolbar: [
                    ['style', ['bold', 'italic', 'underline']],
                    ['fontname', ['fontname']],
                    ['fontsize', ['fontsize']],
                    ['para', ['ul', 'ol', 'paragraph']]
                ],
                placeholder: 'Enter Text...',
                height: 100
            });
            $('[data-ctrl="multiline"]').each(function () {
                var readOnly = $(this).data("readonly");
                if (readOnly) {
                    $(this).summernote('disable');
                }
            });
        }

        var inputPicker = function () {
            $('[data-ctrl="inputpicker"]').inputpicker({
                data: [
                    { value: "1", text: "Text 1", description: "This is the description of the text 1." },
                    { value: "2", text: "Text 2", description: "This is the description of the text 2." },
                    { value: "3", text: "Text 3", description: "This is the description of the text 3." }
                ],
                fields: ['text', 'description'],
                fieldValue: 'value',
                fieldText: 'text',
                headShow: true,
                filterOpen: true,
                autoOpen: true
            });
        }

        var multiselect = function () {
            $('[data-ctrl="multiselect"]').multiSelect({
                selectableHeader: "<input type='text' class='search-input form-control' autocomplete='off' placeholder='Search available options...'>",
                selectionHeader: "<input type='text' class='search-input form-control' autocomplete='off' placeholder='Search selected options...'>",
                afterInit: function (ms) {
                    var that = this,
                        $selectableSearch = that.$selectableUl.prev(),
                        $selectionSearch = that.$selectionUl.prev(),
                        selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                        selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                    that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                        .on('keydown', function (e) {
                            if (e.which === 40) {
                                that.$selectableUl.focus();
                                return false;
                            }
                        });

                    that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                        .on('keydown', function (e) {
                            if (e.which === 40) {
                                that.$selectionUl.focus();
                                return false;
                            }
                        });
                },
                afterSelect: function () {
                    this.qs1.cache();
                    this.qs2.cache();
                },
                afterDeselect: function () {
                    this.qs1.cache();
                    this.qs2.cache();
                }
            });
        }

        var modalEvents = function () {
            $('.show-modal').on('click', function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var url = $(this).attr('href');
                Common.displayModal(url);
            });

            $('[data-form-submit]').on('change', function () {
                isDirty = true;
            });

            $('[data-form-submit ="addEdit"]').submit(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this);
                Common.submitModal(form, 'save', false);
            });

            $('[data-form-submit ="addClose"]').submit(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this);
                Common.submitModal(form, 'save', true);
            });

            $('[data-form-submit ="report"]').submit(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this);
                Common.submitReport(form);
            });

            $('*[data-form-action]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var action = $(this).data('form-action');
                var close = $(this).data('form-close');
                if ($(this).data('form-confirm')) {
                    var msg = $(this).data('form-confirm');
                    Common.swalConfirmSubmit(form, msg, action, close);
                } else {
                    Common.submitModal(form, action, close ?? false);
                }
            });

            $('[data-action =" "]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var action = "saveNew";
                Common.submitModal(form, action, false);
            });

            $('[data-action ="reload"]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var url = $(this).attr('href');
                Common.reloadModal(form, url);
            });

            $('[data-action ="delete"]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var recId = $(this).data('id');
                var url = $(this).attr('href');
                Common.swalDelete(url, recId);
            });

            $('[data-action ="addline"]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var fdata = $(form).serialize()
                var url = $(this).attr('href');
                Common.reloadLine(fdata, url);
            });

            $("[data-parent]").on('hide.bs.modal', function (e) {
                e.stopImmediatePropagation();
                var modalId = $(this).data('parent');
                var form = $(modalId + ' form');
                if (form.length) {
                    var url = $(form)[0].action;
                    Common.reloadModal(form, url);
                }
            });

            $('[data-action ="deleteline"]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var recId = $(this).data('id');
                var url = $(this).attr('href');
                Common.swalDeleteLine(url, recId, form);
            });

            $('[data-action ="pageaction"]').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var close = $(this).data('form-close');
                var report = $(this).data('report');
                var msg = $(this).data('form-confirm');
                var url = $(this).attr('href');
                Common.swalConfirmAction(form, msg, url, report, close, false);
            });
            $('[data-action ="approvalaction"]').click(function (e) {

                e.preventDefault();
                e.stopImmediatePropagation();
                var form = $(this).closest('form');
                var close = $(this).data('form-close');
                var report = $(this).data('report');
                var msg = $(this).data('form-confirm');
                var url = $(this).attr('href');
                Common.swalConfirmAction(form, msg, url, report, close, true);
            });

            $('.report').click(function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var url = $(this).attr('href');
                Common.runReport(url);
            });

            $(function () {
                var $table = $('.refresh-index:first').first();
                $('.modalIndex').on('hide.bs.modal', function (e) {
                    e.stopImmediatePropagation();
                    if ($('.refresh-index').length) {
                        var dataUrl = $table.data("url");
                        $table.bootstrapTable('refreshOptions', {
                            //showColumns: true,
                            search: true,
                            //showRefresh: true,
                            url: dataUrl
                        })
                    }
                });
                $table.on("post-body.bs.table", function () {
                    Common.blockerLink()
                })

                var $tbpartial = $('.refresh-partial:first').first();
                $('.modalChild').on('hide.bs.modal', function (e) {
                    e.stopImmediatePropagation();
                    if ($('.refresh-partial').length) {
                        var dataUrl = $tbpartial.data("url");
                        $tbpartial.bootstrapTable('refreshOptions', {
                            //showColumns: true,
                            search: true,
                            //showRefresh: true,
                            url: dataUrl
                        })
                    }
                });
            });

            $('.modalIndex').on('hide.bs.modal', function (e) {
                if (isDirty) {
                    isDirty = false; // remove this line to force save and prevent close until save
                    $('#promptText').collapse('show');
                    e.preventDefault();
                }
            });

            //$('[data-form-submit]').on('submit', function () {
            //    isDirty = false;
            //    $('.modalIndex').modal('close');
            //});
        }

        var inputMask = function () {
            $('[data-mask ="decimal"]').inputmask({
                'alias': 'decimal',
                digits: 2,
                digitsOptional: false,
                rightAlign: true,
                'groupSeparator': '.',
                'autoGroup': true,
                placeholder: '0'
            });
        }

        var attachDropzone = function () {
            $(".attach-dropzone").dropzone({
                url: config.dropzoneUploadUrl,
                //prevents Dropzone from uploading dropped files immediately
                autoProcessQueue: true,
                addRemoveLinks: true,
                createImageThumbnails: true,
                previewsContainer: "#dz-preview",
                init: function () {
                    var self = this;
                    var recId = this.element.getAttribute('data-id');
                    $.get(config.getAttachmentsUrl, { tempId: $('input[name="tempFileId"]').val(), id: recId }, function (data) {
                        $.each(data, function (index, file) {

                            var existingFile = { name: file.name, size: file.size, isAttached: file.isAttached, };

                            self.emit("addedfile", existingFile);
                            ////TODO: Not sure about all this thumbnail business, need a custom template instead, and proably just use a stock image.
                            if (!file.type.match(/image.*/)) {
                                // This is not an image, so Dropzone doesn't create a thumbnail.
                                // Set a default thumbnail:
                                self.emit("thumbnail", existingFile, config.defaultThumbnailUrl);
                            } else {
                                self.emit("thumbnail", existingFile, file.url);
                            }
                        });
                        //wait to register the custom event here, otherwise the above emit ends up calling this and things go sideways
                        self.on("addedfile", function (file) {
                            if (!file.type.match(/image.*/)) {
                                self.emit("thumbnail", file, config.defaultThumbnailUrl);
                            }
                            else {
                                self.emit("thumbnail", file, file.url);
                            }
                        });
                    });

                },
                sending: function (file, xhr, formData) {
                    var tmpId = $('input[name="tempFileId"]').val();
                    formData.append("tempId", tmpId);
                },
                removedfile: function (file) {
                    if (file.isAttached) {
                        //file is attached to a saved ticket, collect files to delete in hidden input instead of deleting from server
                        var elem = $('input[name="deletedFiles"]');
                        var val = elem.val() ? elem.val().split(',') : [];
                        val.push(file.name);
                        elem.val(val.join(','));
                        killPreview();
                    } else {
                        //file is pending for either a new or existing ticket, delete from server immediately
                        $.ajax({
                            type: 'POST',
                            url: config.deleteFileUrl,
                            data: {
                                "id": $('input[name="tempFileId"]').val(),
                                "fileName": file.name
                            },
                            success: killPreview,
                            dataType: 'json'
                        });
                    }
                    function killPreview() {
                        var ref;
                        return (ref = file.previewElement) !== null ? ref.parentNode.removeChild(file.previewElement) : void 0;
                    }
                }
            });
        }

        return {
            activate: activate,
            bootTable: bootTable,
            dateTime: dateTime,
            dataselect: dataselect,
            cardToggle: cardToggle,
            inputPicker: inputPicker,
            modalEvents: modalEvents,
            inputMask: inputMask,
            selectTable: selectTable,
            multiLine: multiLine,
            multiselect: multiselect,
            attachDropzone: attachDropzone
        };
    })();

})(window);


